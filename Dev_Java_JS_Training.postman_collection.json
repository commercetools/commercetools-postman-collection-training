{
	"info": {
		"_postman_id": "6681ca4b-bec9-43e3-b6c7-459407768f6c",
		"name": "Dev_JAVA_JS_Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11897687"
	},
	"item": [
		{
			"name": "00 Authorization",
			"item": [
				{
					"name": "01 Obtain Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"auth-host\", pm.environment.get(\"auth_url\"));",
									"pm.environment.set(\"api-host\", pm.environment.get(\"host\"));",
									"pm.environment.set(\"connect-host\", \"https://connect.europe-west1.gcp.commercetools.com\");",
									"pm.environment.set(\"project-key\", pm.environment.get(\"project-key\"));",
									"pm.environment.set(\"client-id\", pm.environment.get(\"client_id\"));",
									"pm.environment.set(\"client-secret\", pm.environment.get(\"client_secret\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"ctp-access-token\", res.access_token);",
									"pm.environment.set(\"ctp-scopes\", res.scope);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client-secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client-id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{auth-host}}/oauth/token?grant_type=client_credentials",
							"host": [
								"{{auth-host}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01 Checkout Exercises",
			"item": [
				{
					"name": "01 Get TaxCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"tax-category-id\", res.results[0].id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-host}}/{{project-key}}/tax-categories?limit=1",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"tax-categories"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "02 Create Category - Seeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"seeds-category-id\", res.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"plant-seeds\",\n  \"name\": {\n    \"en\": \"Seeds\",\n    \"de\": \"Seeds\"\n  },\n  \"slug\": {\n    \"en\": \"plant-seeds\",\n    \"de\": \"plant-seeds\"\n  },\n  \"orderHint\": \"0.1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/categories",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 Create Category - Veg Seeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"veg-seeds-category-id\", res.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"veg-seeds\",\n  \"name\": {\n    \"en\": \"Vegetable Seeds\",\n    \"de\": \"Vegetable Seeds\"\n  },\n  \"slug\": {\n    \"en\": \"vegetable-seeds\",\n    \"de\": \"vegetable-seeds\"\n  },\n  \"orderHint\": \"0.2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/categories",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 Create ProductType - Flower Seeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"flower-product-type-id\", res.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Flower seeds\",\n  \"description\": \"Flower seeds\",\n  \"key\": \"flower-seeds-producttype\",\n  \"attributes\": [\n    {\n      \"name\": \"size\",\n      \"label\": {\n        \"de\": \"Size\",\n        \"en\": \"Size\"\n      },\n      \"type\": {\n        \"name\": \"text\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      },\n      \"inputHint\": \"SingleLine\"\n    },\n    {\n      \"name\": \"weight_in_kg\",\n      \"label\": {\n        \"de\": \"Weight in Kg\",\n        \"en\": \"Weight in Kg\"\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/product-types",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"product-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 Create ProductType - Veg Seeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"veg-product-type-id\", res.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Vegetable seeds\",\n  \"description\": \"Vegetable seeds\",\n  \"key\": \"veg-seeds-producttype\",\n  \"attributes\": [\n    {\n      \"name\": \"size\",\n      \"label\": {\n        \"de\": \"Size\",\n        \"en\": \"Size\"\n      },\n      \"type\": {\n        \"name\": \"text\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      },\n      \"inputHint\": \"SingleLine\"\n    },\n    {\n      \"name\": \"weight_in_kg\",\n      \"label\": {\n        \"de\": \"Weight in Kg\",\n        \"en\": \"Weight in Kg\"\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/product-types",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"product-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 Create ProductType - Herb Seeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.environment.set(\"herb-product-type-id\", res.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Herb seeds\",\n  \"description\": \"Herb seeds\",\n  \"key\": \"herb-seeds-producttype\",\n  \"attributes\": [\n    {\n      \"name\": \"size\",\n      \"label\": {\n        \"de\": \"Size\",\n        \"en\": \"Size\"\n      },\n      \"type\": {\n        \"name\": \"text\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      },\n      \"inputHint\": \"SingleLine\"\n    },\n    {\n      \"name\": \"weight_in_kg\",\n      \"label\": {\n        \"de\": \"Weight in Kg\",\n        \"en\": \"Weight in Kg\"\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"attributeConstraint\": \"CombinationUnique\",\n      \"isRequired\": true,\n      \"isSearchable\": true,\n      \"inputTip\": {\n        \"en\": \"\",\n        \"de\": \"\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/product-types",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"product-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 Create Product - Tulip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productType\": {\n    \"typeId\": \"product-type\",\n    \"id\": \"{{flower-product-type-id}}\"\n  },\n  \"name\": {\n    \"en\": \"Tulip Seeds\",\n    \"de\": \"Tulip Seeds\"\n  },\n  \"description\": {\n    \"en\": \"Tulip seeds\",\n    \"de\": \"Tulip seeds\"\n  },\n  \"categories\": [\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{seeds-category-id}}\"\n    }\n  ],\n  \"categoryOrderHints\": {},\n  \"slug\": {\n    \"en\": \"tulip-seeds\",\n    \"de\": \"tulip-seed\"\n  },\n  \"metaDescription\": {\n    \"en\": \"Tulip seeds\",\n    \"de\": \"Tulip seeds\"\n  },\n  \"masterVariant\": {\n    \"id\": 1,\n    \"sku\": \"TULIPSEED01\",\n    \"key\": \"TULIPSEED01\",\n    \"prices\": [\n      {\n        \"key\": \"TulipSeed01Price01\",\n        \"value\": {\n          \"type\": \"centPrecision\",\n          \"currencyCode\": \"EUR\",\n          \"centAmount\": 2710,\n          \"fractionDigits\": 2\n        },\n        \"country\": \"DE\"\n      },\n      {\n        \"key\": \"TulipSeed01Price02\",\n        \"value\": {\n          \"type\": \"centPrecision\",\n          \"currencyCode\": \"EUR\",\n          \"centAmount\": 5900,\n          \"fractionDigits\": 2\n        }\n      }\n    ],\n    \"images\": [],\n    \"attributes\": [\n      {\n        \"name\": \"size\",\n        \"value\": \"package\"\n      },\n      {\n        \"name\": \"weight_in_kg\",\n        \"value\": 0.5\n      }\n    ],\n    \"assets\": [],\n    \"availability\": {\n      \"isOnStock\": true,\n      \"restockableInDays\": 4,\n      \"availableQuantity\": 10\n    }\n  },\n  \"variants\": [\n    {\n      \"id\": 2,\n      \"sku\": \"TULIPSEED02\",\n      \"key\": \"TULIPSEED02\",\n      \"prices\": [\n        {\n          \"key\": \"TulipSeed02Price01\",\n          \"value\": {\n            \"type\": \"centPrecision\",\n            \"currencyCode\": \"EUR\",\n            \"centAmount\": 3000,\n            \"fractionDigits\": 2\n          },\n          \"country\": \"DE\"\n        }\n      ],\n      \"images\": [],\n      \"attributes\": [\n        {\n          \"name\": \"size\",\n          \"value\": \"box\"\n        },\n        {\n          \"name\": \"weight_in_kg\",\n          \"value\": 1.5\n        }\n      ],\n      \"assets\": [],\n      \"availability\": {\n        \"isOnStock\": true,\n        \"restockableInDays\": 2,\n        \"availableQuantity\": 10\n      }\n    },\n    {\n      \"id\": 3,\n      \"sku\": \"TULIPSEED03\",\n      \"key\": \"TULIPSEED03\",\n      \"prices\": [\n        {\n          \"key\": \"TulipSeed03Price01\",\n          \"value\": {\n            \"type\": \"centPrecision\",\n            \"currencyCode\": \"EUR\",\n            \"centAmount\": 1337,\n            \"fractionDigits\": 2\n          },\n          \"country\": \"DE\"\n        }\n      ],\n      \"images\": [],\n      \"attributes\": [\n        {\n          \"name\": \"size\",\n          \"value\": \"sack\"\n        },\n        {\n          \"name\": \"weight_in_kg\",\n          \"value\": 10\n        }\n      ],\n      \"assets\": []\n    }\n  ],\n  \"searchKeywords\": {\n    \"en\": [\n      {\n        \"text\": \"tulip\"\n      },\n      {\n        \"text\": \"flower\"\n      },\n      {\n        \"text\": \"seeds\"\n      }\n    ]\n  },\n  \"hasStagedChanges\": false,\n  \"publish\": true,\n  \"key\": \"tulip-seed-product\",\n  \"taxCategory\": {\n    \"typeId\": \"tax-category\",\n    \"id\": \"{{tax-category-id}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/products",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "08 Create Product - Basil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productType\": {\n    \"typeId\": \"product-type\",\n    \"id\": \"{{herb-product-type-id}}\"\n  },\n  \"name\": {\n    \"en\": \"Basil Seeds\",\n    \"de\": \"Basil Seeds\"\n  },\n  \"description\": {\n    \"en\": \"Basil seeds\",\n    \"de\": \"Basil seeds\"\n  },\n  \"categories\": [\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{seeds-category-id}}\"\n    }\n  ],\n  \"categoryOrderHints\": {},\n  \"slug\": {\n    \"en\": \"basil-seeds\",\n    \"de\": \"basil-seed\"\n  },\n  \"metaDescription\": {\n    \"en\": \"Basil seeds\",\n    \"de\": \"Basil seeds\"\n  },\n  \"masterVariant\": {\n    \"id\": 1,\n    \"sku\": \"BASILSEED01\",\n    \"key\": \"BASILSEED01\",\n    \"prices\": [\n      {\n        \"key\": \"BasilSeed01Price01\",\n        \"value\": {\n          \"type\": \"centPrecision\",\n          \"currencyCode\": \"EUR\",\n          \"centAmount\": 2088,\n          \"fractionDigits\": 2\n        },\n        \"country\": \"DE\"\n      }\n    ],\n    \"images\": [],\n    \"attributes\": [\n      {\n        \"name\": \"size\",\n        \"value\": \"package\"\n      },\n      {\n        \"name\": \"weight_in_kg\",\n        \"value\": 1\n      }\n    ],\n    \"assets\": []\n  },\n  \"variants\": [\n    {\n      \"id\": 2,\n      \"sku\": \"BASILSEED02\",\n      \"key\": \"BASILSEED02\",\n      \"prices\": [\n        {\n          \"key\": \"BasilSeed02Price01\",\n          \"value\": {\n            \"type\": \"centPrecision\",\n            \"currencyCode\": \"EUR\",\n            \"centAmount\": 18000,\n            \"fractionDigits\": 2\n          },\n          \"country\": \"DE\"\n        }\n      ],\n      \"images\": [],\n      \"attributes\": [\n        {\n          \"name\": \"size\",\n          \"value\": \"box\"\n        },\n        {\n          \"name\": \"weight_in_kg\",\n          \"value\": 10\n        }\n      ],\n      \"assets\": []\n    }\n  ],\n  \"searchKeywords\": {\n    \"de\": [],\n    \"en\": [\n      {\n        \"text\": \"basil\"\n      },\n      {\n        \"text\": \"seeds\"\n      },\n      {\n        \"text\": \"herbs\"\n      }\n    ]\n  },\n  \"hasStagedChanges\": false,\n  \"publish\": true,\n  \"key\": \"basil-seed-product\",\n  \"taxCategory\": {\n    \"typeId\": \"tax-category\",\n    \"id\": \"{{tax-category-id}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/products",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "09 Create Product - Carrot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"caba3bb9-5a59-4a8d-85b2-80bb763b29da\",\n  \"version\": 11,\n  \"productType\": {\n    \"typeId\": \"product-type\",\n    \"id\": \"{{veg-product-type-id}}\"\n  },\n  \"name\": {\n    \"en\": \"Carrot Seeds\",\n    \"de\": \"Carrot Seeds\"\n  },\n  \"description\": {\n    \"en\": \"Carrot seeds\",\n    \"de\": \"Carrot seeds\"\n  },\n  \"categories\": [\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{seeds-category-id}}\"\n    },\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{veg-seeds-category-id}}\"\n    }\n  ],\n  \"categoryOrderHints\": {},\n  \"slug\": {\n    \"en\": \"carrot-seeds\",\n    \"de\": \"carrot-seed\"\n  },\n  \"metaDescription\": {\n    \"en\": \"Carrot seeds\",\n    \"de\": \"Carrot seeds\"\n  },\n  \"masterVariant\": {\n    \"id\": 1,\n    \"sku\": \"CARROTSEEDS01\",\n    \"key\": \"CARROTSEEDS01\",\n    \"prices\": [\n      {\n        \"key\": \"CarrotSeed01Price01\",\n        \"value\": {\n          \"type\": \"centPrecision\",\n          \"currencyCode\": \"EUR\",\n          \"centAmount\": 3200,\n          \"fractionDigits\": 2\n        },\n        \"country\": \"DE\"\n      }\n    ],\n    \"images\": [],\n    \"attributes\": [\n      {\n        \"name\": \"size\",\n        \"value\": \"package\"\n      },\n      {\n        \"name\": \"weight_in_kg\",\n        \"value\": 1.5\n      }\n    ],\n    \"assets\": []\n  },\n  \"variants\": [\n    {\n      \"id\": 2,\n      \"sku\": \"CARROTSEEDS02\",\n      \"key\": \"CARROTSEEDS02\",\n      \"prices\": [\n        {\n          \"key\": \"CarrotSeed02Price01\",\n          \"value\": {\n            \"type\": \"centPrecision\",\n            \"currencyCode\": \"EUR\",\n            \"centAmount\": 10000,\n            \"fractionDigits\": 2\n          },\n          \"country\": \"DE\"\n        }\n      ],\n      \"images\": [],\n      \"attributes\": [\n        {\n          \"name\": \"size\",\n          \"value\": \"sack\"\n        },\n        {\n          \"name\": \"weight_in_kg\",\n          \"value\": 5\n        }\n      ],\n      \"assets\": []\n    }\n  ],\n  \"searchKeywords\": {\n    \"en\": [\n      {\n        \"text\": \"seeds\"\n      },\n      {\n        \"text\": \"carrot\"\n      },\n      {\n        \"text\": \"vegetable\"\n      }\n    ]\n  },\n  \"hasStagedChanges\": false,\n  \"publish\": true,\n  \"key\": \"carrot-seed-product\",\n  \"taxCategory\": {\n    \"typeId\": \"tax-category\",\n    \"id\": \"{{tax-category-id}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/products",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 Create Product - Celery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productType\": {\n    \"typeId\": \"product-type\",\n    \"id\": \"{{veg-product-type-id}}\"\n  },\n  \"name\": {\n    \"en\": \"Celery Seeds\",\n    \"de\": \"Celery Seeds\"\n  },\n  \"description\": {\n    \"en\": \"Celery seeds\",\n    \"de\": \"Celery seeds\"\n  },\n  \"categories\": [\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{seeds-category-id}}\"\n    },\n    {\n      \"typeId\": \"category\",\n      \"id\": \"{{veg-seeds-category-id}}\"\n    }\n  ],\n  \"categoryOrderHints\": {},\n  \"slug\": {\n    \"en\": \"celery-seeds\"\n  },\n  \"metaDescription\": {\n    \"en\": \"Celery seeds\",\n    \"de\": \"Celery seeds\"\n  },\n  \"masterVariant\": {\n    \"id\": 1,\n    \"sku\": \"CELERYSEEDS01\",\n    \"key\": \"CELERYSEEDS01\",\n    \"prices\": [\n      {\n        \"key\": \"CelerySeed01Price01\",\n        \"value\": {\n          \"type\": \"centPrecision\",\n          \"currencyCode\": \"EUR\",\n          \"centAmount\": 2800,\n          \"fractionDigits\": 2\n        },\n        \"country\": \"DE\"\n      }\n    ],\n    \"images\": [],\n    \"attributes\": [\n      {\n        \"name\": \"size\",\n        \"value\": \"box\"\n      },\n      {\n        \"name\": \"weight_in_kg\",\n        \"value\": 3\n      }\n    ],\n    \"assets\": []\n  },\n  \"variants\": [],\n  \"searchKeywords\": {\n    \"en\": [\n      {\n        \"text\": \"seeds\"\n      },\n      {\n        \"text\": \"celery\"\n      },\n      {\n        \"text\": \"vegetable\"\n      }\n    ]\n  },\n  \"hasStagedChanges\": false,\n  \"publish\": true,\n  \"key\": \"celery-seed-product\",\n  \"taxCategory\": {\n    \"typeId\": \"tax-category\",\n    \"id\": \"{{tax-category-id}}\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-host}}/{{project-key}}/products",
							"host": [
								"{{api-host}}"
							],
							"path": [
								"{{project-key}}",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02 Connect Exercises",
			"item": [
				{
					"name": "01 Customer Number Generator App Without Ngrok",
					"item": [
						{
							"name": "01 Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"customer-id\", res.id);",
											"pm.environment.set(\"customer-json\", JSON.stringify(res));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john@email.com\",\n  \"password\": \"pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api-host}}/{{project-key}}/customers",
									"host": [
										"{{api-host}}"
									],
									"path": [
										"{{project-key}}",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Post CustomerCreated Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"Create\",\n  \"resource\": {\n    \"typeId\": \"customer\",\n    \"id\": \"{{customer-id}}\",\n    \"obj\": {{customer-json}}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/assign-customer-number",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"assign-customer-number"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "02 Customer Number Generator App With Ngrok",
					"item": [
						{
							"name": "01 Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\",\n  \"email\": \"jane@email.com\",\n  \"password\": \"pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api-host}}/{{project-key}}/customers",
									"host": [
										"{{api-host}}"
									],
									"path": [
										"{{project-key}}",
										"customers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03 Email Verification Sender App",
					"item": [
						{
							"name": "01 Initial Subscription ResourceCreated Notification",
							"item": [
								{
									"name": "01 Post ResourceCreated Notification",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const btoa = require(\"btoa\");",
													"",
													"const projectKey = pm.environment.get(\"project-key\");",
													"",
													"const data = `{",
													"  \"notificationType\": \"ResourceCreated\",",
													"  \"projectKey\": \"${projectKey}\",",
													"  \"resource\": {",
													"    \"typeId\": \"subscription\",",
													"    \"id\": \"b9f82fd5-ddf5-446a-a39d-0966a4a744ea\"",
													"  },",
													"  \"version\": 1,",
													"  \"modifiedAt\": \"2022-10-25T13:23:05.384Z\"",
													"}`;",
													"",
													"const encodedData = btoa(data);",
													"console.log(encodedData)",
													"",
													"pm.variables.set(\"subscription-created-message\", encodedData);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": {\n    \"data\": \"{{subscription-created-message}}\",\n    \"messageId\": \"2070443601311540\",\n    \"message_id\": \"2070443601311540\",\n    \"publishTime\": \"2024-02-26T19:13:55.749Z\",\n    \"publish_time\": \"2024-02-26T19:13:55.749Z\"\n  },\n  \"subscription\": \"projects/myproject/subscriptions/mysubscription\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/send-email-verification",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"send-email-verification"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "02 CustomerCreated Message",
							"item": [
								{
									"name": "01 Query Customers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const res = pm.response.json();",
													"",
													"pm.environment.set(\"customer-id\", res.results[0].id);",
													"pm.environment.set(\"customer-version\", res.results[0].version);",
													"pm.environment.set(\"customer-json\", JSON.stringify(res.results[0]));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api-host}}/{{project-key}}/customers?limit=1",
											"host": [
												"{{api-host}}"
											],
											"path": [
												"{{project-key}}",
												"customers"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "02 Post CustomerCreated Message",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const btoa = require(\"btoa\");",
													"",
													"const projectKey = pm.environment.get(\"project-key\");",
													"const customerId = pm.environment.get(\"customer-id\");",
													"const customerVersion = pm.environment.get(\"customer-version\");",
													"const customerJson = pm.environment.get(\"customer-json\");",
													"",
													"const data = `{",
													"  \"notificationType\": \"Message\",",
													"  \"projectKey\": \"${projectKey}\",",
													"  \"id\": \"b9f82fd5-ddf5-446a-a39d-0966a4a744ea\",",
													"  \"version\": 1,",
													"  \"sequenceNumber\": 1,",
													"  \"resource\": {",
													"    \"typeId\": \"customer\",",
													"    \"id\": \"${customerId}\"",
													"  },",
													"  \"resourceVersion\": ${customerVersion},",
													"  \"type\": \"CustomerCreated\",",
													"  \"customer\": ${customerJson}",
													"}`;",
													"",
													"const encodedData = btoa(data);",
													"console.log(encodedData)",
													"",
													"pm.variables.set(\"customer-created-message\", encodedData);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": {\n    \"data\": \"{{customer-created-message}}\",\n    \"messageId\": \"2070443601311540\",\n    \"message_id\": \"2070443601311540\",\n    \"publishTime\": \"2024-02-26T19:13:55.749Z\",\n    \"publish_time\": \"2024-02-26T19:13:55.749Z\"\n  },\n  \"subscription\": \"projects/myproject/subscriptions/mysubscription\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/send-email-verification",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"send-email-verification"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "04 Email Verification Receiver App",
					"item": [
						{
							"name": "01 Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"enter_token_value_here\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/verify-token",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"verify-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Verify Token Remote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"YNboeEXZOjn0FFiFcZtEgvxROhJu1Z9GKXAzABv1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://service-n5vdp0gtkjgoq33o9jwfjqjm.europe-west1.gcp.3.commercetools.app/verify-token",
									"protocol": "https",
									"host": [
										"service-n5vdp0gtkjgoq33o9jwfjqjm",
										"europe-west1",
										"gcp",
										"3",
										"commercetools",
										"app"
									],
									"path": [
										"verify-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05 Deploy Connector",
					"item": [
						{
							"name": "01 Create ConnectorStaged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-id\", res.id);",
											"pm.environment.set(\"connector-staged-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"{{connector-staged-key}}\",\n  \"name\": \"{{connector-name}}\",\n  \"description\": \"Handles a new customer account by assigning a unique customer number and sends and verifies the email verification token\",\n  \"creator\": {\n    \"email\": \"{{creator-email}}\",\n    \"company\": \"{{company-name}}\",\n    \"noOfContributors\": 1\n  },\n  \"repository\": {\n    \"url\": \"{{repo-url}}\",\n    \"tag\": \"{{repo-tag}}\"\n  },\n  \"privateProjects\": [],\n  \"supportedRegions\": [\n    \"europe-west1.gcp\"\n  ],\n  \"integrationTypes\": [\n    \"crm\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{connect-host}}/connectors/drafts",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Get ConnectorStaged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-id\", res.id);",
											"pm.environment.set(\"connector-staged-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/key={{connector-staged-key}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"key={{connector-staged-key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 Update ConnectorStaged - tag (optional)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"version\": {{connector-staged-version}},\n  \"actions\": [\n    {\n      \"action\": \"setRepository\",\n      \"url\": \"{{repo-url}}\",\n      \"tag\": \"{{repo-tag}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/{{connector-staged-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"{{connector-staged-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "04 Update ConnectorStaged - publish or preview",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"version\": {{connector-staged-version}},\n  \"actions\": [\n    // {\n    //     \"action\": \"updatePreviewable\"\n    // }\n    {\n      \"action\": \"publish\",\n      \"certification\": false\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/{{connector-staged-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"{{connector-staged-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "05 Check ConnectorStaged is Published or isPreviewable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and status is Published\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().status).to.equal(\"Published\");",
											"});",
											"",
											"// pm.test(\"Status code is 200 and isPreviewale is true\", function () {",
											"//     pm.response.to.have.status(200);",
											"//     pm.expect(pm.response.json().isPreviewable).to.equal(\"true\");",
											"// });",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/{{connector-staged-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"{{connector-staged-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "06 Create Deployment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"deployment-id\", res.id);",
											"pm.environment.set(\"deployment-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"{{deployment-key}}\",\n  \"connector\": {\n    \"id\": \"{{connector-staged-id}}\" //,\n    // \"staged\": true\n  },\n  \"region\": \"europe-west1.gcp\",\n  \"configurations\": [\n    {\n      \"applicationName\": \"customer-number-generator-app\",\n      \"standardConfiguration\": [\n        {\n          \"key\": \"CTP_TEST\",\n          \"value\": \"anything\"\n        }\n      ]\n    },\n    {\n      \"applicationName\": \"email-verification-sender-app\",\n      \"standardConfiguration\": [\n        {\n          \"key\": \"CTP_TEST\",\n          \"value\": \"anything\"\n        }\n      ]\n    },\n    {\n      \"applicationName\": \"email-verification-receiver-app\",\n      \"standardConfiguration\": [\n        {\n          \"key\": \"CTP_TEST\",\n          \"value\": \"anything\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{connect-host}}/{{project-key}}/deployments",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"{{project-key}}",
										"deployments"
									]
								}
							},
							"response": []
						},
						{
							"name": "07 Check Deployment is Deployed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and status is Deployed\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().status).to.equal(\"Deployed\");",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"deployment-version\", res.version);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{connect-host}}/{{project-key}}/deployments/{{deployment-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"{{project-key}}",
										"deployments",
										"{{deployment-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "06 Cleanup",
					"item": [
						{
							"name": "01 Delete Deployment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{connect-host}}/{{project-key}}/deployments/{{deployment-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"{{project-key}}",
										"deployments",
										"{{deployment-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Get ConnectorStaged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-version\", res.version);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/{{connector-staged-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"{{connector-staged-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 Update ConnectorStaged - unpublish",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const res = pm.response.json();",
											"",
											"pm.environment.set(\"connector-staged-version\", res.version);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"version\": {{connector-staged-version}},\n  \"actions\": [\n    {\n      \"action\": \"unlist\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{connect-host}}/connectors/drafts/{{connector-staged-id}}",
									"host": [
										"{{connect-host}}"
									],
									"path": [
										"connectors",
										"drafts",
										"{{connector-staged-id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ctp-access-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "connector-staged-key",
			"value": "tt-connector-2024-09-02",
			"type": "string"
		},
		{
			"key": "connector-name",
			"value": "Customer Data Manager 2024-09-02",
			"type": "string"
		},
		{
			"key": "creator-email",
			"value": "tt@test.com",
			"type": "string"
		},
		{
			"key": "company-name",
			"value": "TT Tech",
			"type": "string"
		},
		{
			"key": "repo-url",
			"value": "git@github.com:tt/dev-training-connector-20240902.git",
			"type": "string"
		},
		{
			"key": "repo-tag",
			"value": "v0.0.1",
			"type": "string"
		},
		{
			"key": "deployment-key",
			"value": "tt-deployment-2024-09-02",
			"type": "string"
		}
	]
}