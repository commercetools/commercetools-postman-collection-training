{
	"info": {
		"_postman_id": "c7e8257a-a920-4ccd-b7f8-2e964089c1a7",
		"name": "FA Integration",
		"description": "## Disclaimer\n\nThis is not the official commercetools Composable Commerce documentation. Please see [here](http://docs.commercetools.com/)  \nfor a complete and approved documentation of the commercetools Composable Commerce.\n\n## How to use\n\n**:warning: Be aware that postman automatically synchronizes environment variables (including your API client credentials) to your workspace if logged in.  \nUse this collection only for development purposes and non-production projects.**\n\nTo use this collection in Postman please perform the following steps:\n\n1. Download and install the Postman Client\n2. Import the [collection.json](collection.json) and [template.json](template.json) in your postman application\n3. In the Merchant Center, create a new API Client and fill in the client credentials in your environment\n4. Obtain an access token by sending the \"Authorization/Obtain access token\" request at the bottom of the request list. Now you can use all other endpoints\n    \n\nFeel free to clone and modify this collection to your needs.\n\nTo automate frequent tasks the collection automatically manages commonly required values and parameters such  \nas resource ids, keys and versions in Postman environment variables for you.\n\nPlease see [http://docs.commercetools.com/](http://docs.commercetools.com/) for further information about the commercetools Plattform.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11897687"
	},
	"item": [
		{
			"name": "Case 00 - Project preparation",
			"item": [
				{
					"name": "[Backend] Obtain access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"pm.environment.set(\"import-host\", \"https://import.europe-west1.gcp.commercetools.com\");",
									"var data = JSON.parse(responseBody);",
									"if(data.access_token){",
									"    pm.environment.set(\"ctp_access_token\", data.access_token);",
									"}",
									"if (data.scope) {",
									"    parts = data.scope.split(\" \");",
									"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
									"    if (parts.length > 0) {",
									"        scopeParts = parts[0];",
									"        pm.environment.set(\"project-key\", scopeParts[1]);",
									"        parts = parts.filter(scope => scope.length >= 3)",
									"        if (parts.length > 0) {",
									"            scopeParts = parts[0];",
									"            pm.environment.set(\"store-key\", scopeParts[2]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Get Project settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"-id\", data.results[0].id); ",
									"    pm.environment.set(\"-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"-key\", data.results[0].key); ",
									"}",
									"if(data.version){",
									"    pm.environment.set(\"-version\", data.version);",
									"}",
									"if(data.id){",
									"    pm.environment.set(\"-id\", data.id); ",
									"}",
									"if(data.key){",
									"    pm.environment.set(\"-key\", data.key);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/{{project-key}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Project Setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"-id\", data.results[0].id); ",
									"    pm.environment.set(\"-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"-key\", data.results[0].key); ",
									"}",
									"if(data.version){",
									"    pm.environment.set(\"-version\", data.version);",
									"}",
									"if(data.id){",
									"    pm.environment.set(\"-id\", data.id); ",
									"}",
									"if(data.key){",
									"    pm.environment.set(\"-key\", data.key);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"version\": {{-version}},\n    \"actions\": [\n        {\n            \"action\": \"changeLanguages\",\n            \"languages\": [\n                \"en\"\n            ]\n        },\n        {\n            \"action\": \"changeCountries\",\n            \"countries\": [\n                \"AU\"\n            ]\n        },\n        {\n            \"action\": \"changeCurrencies\",\n            \"currencies\": [\n                \"AUD\"\n            ]\n        },\n        {\n            \"action\": \"changeProductSearchIndexingEnabled\",\n            \"enabled\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Add Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"zone-id\", data.results[0].id); ",
									"    pm.environment.set(\"zone-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"zone-key\", data.results[0].key); ",
									"}",
									"if(data.version){",
									"    pm.environment.set(\"zone-version\", data.version);",
									"}",
									"if(data.id){",
									"    pm.environment.set(\"zone-id\", data.id); ",
									"}",
									"if(data.key){",
									"    pm.environment.set(\"zone-key\", data.key);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Australia\",\n    \"locations\": [\n        {\n            \"country\": \"AU\",\n            \"state\": \"NSW\"\n        },\n        {\n            \"country\": \"AU\",\n            \"state\": \"VIC\"\n        },\n        {\n            \"country\": \"AU\",\n            \"state\": \"QLD\"\n        },\n        {\n            \"country\": \"AU\",\n            \"state\": \"WA\"\n        },\n        {\n            \"country\": \"AU\",\n            \"state\": \"SA\"\n        },\n        {\n            \"country\": \"AU\",\n            \"state\": \"TAS\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}/zones",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}",
								"zones"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Add Tax Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"tax-category-id\", data.results[0].id); ",
									"    pm.environment.set(\"tax-category-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"tax-category-key\", data.results[0].key); ",
									"}",
									"if(data.version){",
									"    pm.environment.set(\"tax-category-version\", data.version);",
									"}",
									"if(data.id){",
									"    pm.environment.set(\"tax-category-id\", data.id); ",
									"}",
									"if(data.key){",
									"    pm.environment.set(\"tax-category-key\", data.key);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"GST\",\n    \"description\": \"General Sales Tax\",\n    \"rates\": [ \n        {\n            \"name\": \"aus-nsw-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"NSW\",\n            \"key\": \"aus-nsw-gst\"\n        },\n        {\n            \"name\": \"aus-vic-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"VIC\",\n            \"key\": \"aus-vic-gst\"\n        },\n                {\n            \"name\": \"aus-qld-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"QLD\",\n            \"key\": \"aus-qld-gst\"\n        },\n                {\n            \"name\": \"aus-wa-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"WA\",\n            \"key\": \"aus-wa-gst\"\n        },\n                {\n            \"name\": \"aus-sa-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"SA\",\n            \"key\": \"aus-sa-gst\"\n        },\n                {\n            \"name\": \"aus-tas-gst\",\n            \"amount\": 0.1,\n            \"includedInPrice\": true,\n            \"country\": \"AU\",\n            \"state\": \"TAS\",\n            \"key\": \"aus-tas-gst\"\n        }\n    ],\n    \"key\": \"gst-tax-category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}/tax-categories",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}",
								"tax-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Create Customer (VIC)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"customer-01-id\", data.results[0].id); ",
									"    pm.environment.set(\"customer-01-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"customer-01-key\", data.results[0].key); ",
									"}",
									"if(data.customer.version){",
									"    pm.environment.set(\"customer-01-version\", data.customer.version);",
									"}",
									"if(data.customer.id){",
									"    pm.environment.set(\"customer-01-id\", data.customer.id); ",
									"}",
									"if(data.customer.key){",
									"    pm.environment.set(\"customer-01-key\", data.customer.key);",
									"}",
									"if(data.customer.email){",
									"    pm.environment.set(\"customer-01-email\", data.customer.email);",
									"}",
									"if(data.customer.password){",
									"    pm.environment.set(\"customer-01-password\", data.customer.password);",
									"}",
									"if(data.customer.addresses[0].id) {",
									"    pm.environment.set(\"customer-01-address-id\", data.customer.addresses[0].id);",
									"    pm.environment.set(\"customer-01-address-street-name\", data.customer.addresses[0].streetName);",
									"    pm.environment.set(\"customer-01-address-street-nr\", data.customer.addresses[0].streetNumber);",
									"    pm.environment.set(\"customer-01-address-postal-code\", data.customer.addresses[0].postalCode);",
									"    pm.environment.set(\"customer-01-address-city\", data.customer.addresses[0].city);",
									"    pm.environment.set(\"customer-01-address-state\", data.customer.addresses[0].state);",
									"    pm.environment.set(\"customer-01-address-country\", data.customer.addresses[0].country);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"jeremy@topgear.com\",\n    \"firstName\": \"Jeremy\",\n    \"lastName\": \"Clarkson\",\n    \"password\": \"secret123\",\n    \"isEmailVerified\": true,\n    \"addresses\": [\n        {\n            \"streetName\": \"Bourke Street\",\n            \"streetNumber\": \"360\",\n            \"postalCode\": \"3000\",\n            \"city\": \"Melbourne\",\n            \"country\": \"AU\",\n            \"state\": \"VIC\"\n        }\n    ],\n    \"defaultShippingAddress\": 0,\n    \"defaultBillingAddress\": 0,\n    \"key\": \"customer-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}/customers",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Create Customer (WA)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"customer-02-id\", data.results[0].id); ",
									"    pm.environment.set(\"customer-02-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"customer-02-key\", data.results[0].key); ",
									"}",
									"if(data.customer.version){",
									"    pm.environment.set(\"customer-02-version\", data.customer.version);",
									"}",
									"if(data.customer.id){",
									"    pm.environment.set(\"customer-02-id\", data.customer.id); ",
									"}",
									"if(data.customer.key){",
									"    pm.environment.set(\"customer-02-key\", data.customer.key);",
									"}",
									"if(data.customer.email){",
									"    pm.environment.set(\"customer-02-email\", data.customer.email);",
									"}",
									"if(data.customer.password){",
									"    pm.environment.set(\"customer-02-password\", data.customer.password);",
									"}",
									"if(data.customer.addresses[0].id) {",
									"    pm.environment.set(\"customer-02-address-id\", data.customer.addresses[0].id);",
									"    pm.environment.set(\"customer-02-address-street-name\", data.customer.addresses[0].streetName);",
									"    pm.environment.set(\"customer-02-address-street-nr\", data.customer.addresses[0].streetNumber);",
									"    pm.environment.set(\"customer-02-address-postal-code\", data.customer.addresses[0].postalCode);",
									"    pm.environment.set(\"customer-02-address-city\", data.customer.addresses[0].city);",
									"    pm.environment.set(\"customer-02-address-state\", data.customer.addresses[0].state);",
									"    pm.environment.set(\"customer-02-address-country\", data.customer.addresses[0].country);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"brian@acdc.au\",\n    \"firstName\": \"Brian\",\n    \"lastName\": \"Johnson\",\n    \"password\": \"thunderstruck123\",\n    \"isEmailVerified\": true,\n    \"addresses\": [\n        {\n            \"streetName\": \"Frederick St\",\n            \"streetNumber\": \"62\",\n            \"postalCode\": \"6735\",\n            \"city\": \"Broome\",\n            \"country\": \"AU\",\n            \"state\": \"WA\"\n        }\n    ],\n    \"defaultShippingAddress\": 0,\n    \"defaultBillingAddress\": 0,\n    \"key\": \"customer-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}/customers",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Backend] Create Product Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
									"var data = JSON.parse(responseBody);",
									"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
									"    pm.environment.set(\"product-type-id\", data.results[0].id); ",
									"    pm.environment.set(\"product-type-version\", data.results[0].version);",
									"}",
									"if(data.results && data.results[0] && data.results[0].key){",
									"    pm.environment.set(\"product-type-key\", data.results[0].key); ",
									"}",
									"if(data.version){",
									"    pm.environment.set(\"product-type-version\", data.version);",
									"}",
									"if(data.id){",
									"    pm.environment.set(\"product-type-id\", data.id); ",
									"}",
									"if(data.key){",
									"    pm.environment.set(\"product-type-key\", data.key);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ctp_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Memory Card\",\n    \"description\": \"a small, flat flash drive used especially in digital cameras and mobile phones.\",\n    \"classifier\": \"Complex\",\n    \"attributes\": [\n        {\n            \"name\": \"brand\",\n            \"label\": {\n                \"en\": \"Brand\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": true,\n            \"type\": {\n                \"name\": \"text\"\n            },\n            \"attributeConstraint\": \"SameForAll\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"adapter-included\",\n            \"label\": {\n                \"en\": \"Adapter Included?\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": true,\n            \"type\": {\n                \"name\": \"boolean\"\n            },\n            \"attributeConstraint\": \"None\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"speed-class\",\n            \"label\": {\n                \"en\": \"Speed class\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": false,\n            \"type\": {\n                \"name\": \"text\"\n            },\n            \"attributeConstraint\": \"None\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"capacity-gb\",\n            \"label\": {\n                \"en\": \"Capacity (GB)\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": true,\n            \"type\": {\n                \"name\": \"number\"\n            },\n            \"attributeConstraint\": \"None\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"max-read-speed-mbs\",\n            \"label\": {\n                \"en\": \"Max. read spead (MB/s)\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": true,\n            \"type\": {\n                \"name\": \"number\"\n            },\n            \"attributeConstraint\": \"None\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"max-write-speed-mbs\",\n            \"label\": {\n                \"en\": \"Max. write speed (MB/s)\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": true,\n            \"type\": {\n                \"name\": \"number\"\n            },\n            \"attributeConstraint\": \"None\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        },\n        {\n            \"name\": \"card-type\",\n            \"label\": {\n                \"en\": \"Type\"\n            },\n            \"inputTip\": {\n                \"en\": \"\"\n            },\n            \"isRequired\": false,\n            \"type\": {\n                \"name\": \"text\"\n            },\n            \"attributeConstraint\": \"SameForAll\",\n            \"isSearchable\": true,\n            \"inputHint\": \"SingleLine\",\n            \"displayGroup\": \"Other\"\n        }\n    ],\n    \"key\": \"memory-card-prod-type\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/{{project-key}}/product-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{project-key}}",
								"product-types"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case 01 - Warehouse shipping",
			"item": [
				{
					"name": "Create custom types for Channel and Cart/Order",
					"item": [
						{
							"name": "[Backend] Create Custom Type for Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"channel-type-id\", data.results[0].id); ",
											"    pm.environment.set(\"channel-type-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"channel-type-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"channel-type-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"channel-type-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"channel-type-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"additiopnaChannelInfo\",\n    \"name\": {\n        \"en\": \"Additional Channel Information\"\n    },\n    \"resourceTypeIds\": [\n        \"channel\"\n    ],\n    \"fieldDefinitions\": [\n        {\n            \"name\": \"deliveryType\",\n            \"label\": {\n                \"en\": \"Delivery Type\"\n            },\n            \"required\": false,\n            \"type\": {\n                \"name\": \"Set\",\n                \"elementType\": {\n                    \"name\": \"Enum\",\n                    \"values\": [\n                        {\n                            \"key\": \"warehouse\",\n                            \"label\": \"Warehouse\"\n                        },\n                        {\n                            \"key\": \"retailClickAndCollect\",\n                            \"label\": \"Retail Click & Collect\"\n                        },\n                        {\n                            \"key\": \"courierAsap\",\n                            \"label\": \"Courier ASAP\"\n                        }\n                    ]\n                }\n            },\n            \"inputHint\": \"SingleLine\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/types",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add preferred delivery field to cart/order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.results[0].id); ",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"deliveryInfo\",\n    \"name\": {\n        \"en\": \"Additional Delivery Information\"\n    },\n    \"description\": {\n        \"en\": \"The delivery type preferred by the customer\"\n    },\n    \"resourceTypeIds\": [\n        \"order\"\n    ],\n    \"fieldDefinitions\": [\n        {\n            \"name\": \"deliveryChannel\",\n            \"label\": {\n                \"en\": \"Cart delivery channel\"\n            },\n            \"required\": false,\n            \"type\": {\n                \"name\": \"Reference\",\n                \"referenceTypeId\": \"channel\"\n            }\n        },\n        {\n            \"name\": \"preferredDeliveryType\",\n            \"label\": {\n                \"en\": \"Delivery Type\"\n            },\n            \"required\": false,\n            \"type\": {\n                \"name\": \"Enum\",\n                \"values\": [\n                    {\n                        \"key\": \"warehouse\",\n                        \"label\": \"Warehouse\"\n                    },\n                    {\n                        \"key\": \"retailClickAndCollect\",\n                        \"label\": \"Retail Click & Collect\"\n                    },\n                    {\n                        \"key\": \"courierAsap\",\n                        \"label\": \"Courier ASAP\"\n                    },\n                    {\n                        \"key\": \"none\",\n                        \"label\": \"None\"\n                    }\n                ]\n            },\n            \"inputHint\": \"SingleLine\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/types",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add warehouse channel",
					"item": [
						{
							"name": "[Backend] Add warehouse channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"warehouse-channel-id\", data.results[0].id); ",
											"    pm.environment.set(\"warehouse-channel-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"warehouse-channel-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"warehouse-channel-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"warehouse-channel-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"warehouse-channel-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-warehouse-channel\",\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"name\": {\n        \"en\": \"AUS Warehouse\"\n    },\n    \"description\": {\n        \"en\": \"Australian warehouse\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"warehouse\"\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add product and update inventory",
					"item": [
						{
							"name": "[Backend] Add Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"product-id\", data.results[0].id); ",
											"    pm.environment.set(\"product-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"product-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"product-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"product-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"product-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"productType\": {\n        \"typeId\": \"product-type\",\n        \"id\": \"{{product-type-id}}\"\n    },\n    \"name\": {\n        \"en\": \"Samsung Evo Plus\"\n    },\n    \"categories\": [],\n    \"categoryOrderHints\": {},\n    \"slug\": {\n        \"en\": \"samsung-evo-plus\"\n    },\n    \"masterVariant\": {\n        \"id\": 1,\n        \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n        \"key\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n        \"prices\": [\n            {\n                \"value\": {\n                    \"type\": \"centPrecision\",\n                    \"currencyCode\": \"AUD\",\n                    \"centAmount\": 4000,\n                    \"fractionDigits\": 2\n                },\n                \"key\": \"default-price\"\n            }\n        ],\n        \"attributes\": [\n            {\n                \"name\": \"brand\",\n                \"value\": \"Samsung\"\n            },\n            {\n                \"name\": \"card-type\",\n                \"value\": \"microSDXC\"\n            },\n            {\n                \"name\": \"adapter-included\",\n                \"value\": true\n            },\n            {\n                \"name\": \"speed-class\",\n                \"value\": \"A2\"\n            },\n            {\n                \"name\": \"capacity-gb\",\n                \"value\": 256\n            },\n            {\n                \"name\": \"max-read-speed-mbs\",\n                \"value\": 130\n            },\n            {\n                \"name\": \"max-write-speed-mbs\",\n                \"value\": 90\n            }\n        ]\n    },\n    \"variants\": [\n        {\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"key\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"prices\": [\n                {\n                    \"value\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 2500,\n                        \"fractionDigits\": 2\n                    },\n                    \"key\": \"default-price\"\n                }\n            ],\n            \"attributes\": [\n                {\n                    \"name\": \"brand\",\n                    \"value\": \"Samsung\"\n                },\n                {\n                    \"name\": \"card-type\",\n                    \"value\": \"microSDXC\"\n                },\n                {\n                    \"name\": \"adapter-included\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"speed-class\",\n                    \"value\": \"A2\"\n                },\n                {\n                    \"name\": \"capacity-gb\",\n                    \"value\": 128\n                },\n                {\n                    \"name\": \"max-read-speed-mbs\",\n                    \"value\": 130\n                },\n                {\n                    \"name\": \"max-write-speed-mbs\",\n                    \"value\": 90\n                }\n            ]\n        },\n        {\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"key\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"prices\": [\n                {\n                    \"value\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 7000,\n                        \"fractionDigits\": 2\n                    },\n                    \"key\": \"default-price\"\n                }\n            ],\n            \"attributes\": [\n                {\n                    \"name\": \"brand\",\n                    \"value\": \"Samsung\"\n                },\n                {\n                    \"name\": \"card-type\",\n                    \"value\": \"microSDXC\"\n                },\n                {\n                    \"name\": \"adapter-included\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"speed-class\",\n                    \"value\": \"A2\"\n                },\n                {\n                    \"name\": \"capacity-gb\",\n                    \"value\": 512\n                },\n                {\n                    \"name\": \"max-read-speed-mbs\",\n                    \"value\": 130\n                },\n                {\n                    \"name\": \"max-write-speed-mbs\",\n                    \"value\": 120\n                }\n            ]\n        }\n    ],\n    \"key\": \"samsung-evo-plus-product\",\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"priceMode\": \"Embedded\",\n    \"publish\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add inventory for 1st variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n    \"quantityOnStock\": 111,\n    \"supplyChannel\": {\n        \"typeId\": \"channel\",\n        \"id\": \"{{warehouse-channel-id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/inventory",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add inventory for 2nd variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n    \"quantityOnStock\": 222,\n    \"supplyChannel\": {\n        \"typeId\": \"channel\",\n        \"id\": \"{{warehouse-channel-id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/inventory",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add inventory for 3rd variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n    \"quantityOnStock\": 333,\n    \"supplyChannel\": {\n        \"typeId\": \"channel\",\n        \"id\": \"{{warehouse-channel-id}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/inventory",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"inventory"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Standard/Express Shipping Methods",
					"item": [
						{
							"name": "[Backend] Add Standard Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"standard-shipping-method-id\", data.results[0].id); ",
											"    pm.environment.set(\"standard-shipping-method-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"standard-shipping-method-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"standard-shipping-method-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"standard-shipping-method-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"standard-shipping-method-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Standard Delivery\",\n    \"localizedName\": {\n        \"en\": \"Standard Delivery\"\n    },\n    \"localizedDescription\": {\n        \"en\": \"3 - 5 business days\"\n    },\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"zoneRates\": [\n        {\n            \"zone\": {\n                \"typeId\": \"zone\",\n                \"id\": \"{{zone-id}}\"\n            },\n            \"shippingRates\": [\n                {\n                    \"price\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 500,\n                        \"fractionDigits\": 2\n                    },\n                    \"freeAbove\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 5000,\n                        \"fractionDigits\": 2\n                    }\n                }\n            ]\n        }\n    ],\n    \"isDefault\": true,\n    \"predicate\": \"custom.preferredDeliveryType = \\\"warehouse\\\"\",\n    \"key\": \"warehouseStandard\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add Express Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"express-shipping-method-id\", data.results[0].id); ",
											"    pm.environment.set(\"express-shipping-method-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"express-shipping-method-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"express-shipping-method-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"express-shipping-method-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"express-shipping-method-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Express Delivery\",\n    \"localizedName\": {\n        \"en\": \"Express Delivery\"\n    },\n    \"localizedDescription\": {\n        \"en\": \"1 - 2 business days\"\n    },\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"zoneRates\": [\n        {\n            \"zone\": {\n                \"typeId\": \"zone\",\n                \"id\": \"{{zone-id}}\"\n            },\n            \"shippingRates\": [\n                {\n                    \"price\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 1000,\n                        \"fractionDigits\": 2\n                    },\n                    \"freeAbove\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 10000,\n                        \"fractionDigits\": 2\n                    }\n                }\n            ]\n        }\n    ],\n    \"isDefault\": false,\n    \"predicate\": \"custom.preferredDeliveryType = \\\"warehouse\\\"\",\n    \"key\": \"warehouseExpress\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create API Extension",
					"item": [
						{
							"name": "[Backend] Create API Extension Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"extension-id\", data.results[0].id); ",
											"    pm.environment.set(\"extension-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"extension-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"extension-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"extension-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"extension-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"destination\": {\n        \"type\": \"AWSLambda\",\n        \"arn\": \"arn:aws:lambda:eu-north-1:555153148374:function:FA_Integration_1\", //Given by instructor\n        \"accessKey\": \"AKIAYCQNUZHLEPD4NVX2\", //Given by instructor\n        \"accessSecret\": \"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\" //Given by instructor\n    },\n    \"triggers\": [\n        {\n            \"resourceTypeId\": \"cart\",\n            \"actions\": [\n                \"Update\"\n            ],\n            \"condition\": \"custom(fields(preferredDeliveryType != \\\"none\\\")) and custom(fields(deliveryChannel(id has changed)))\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/extensions",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"extensions"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Extension triggers an AWS Lambda function which checks if there is a value for the deliveryChannel on cart. If so it returns an array of update actions to set that channel as the supplyChannel for all line items in the cart.\n\nThe arn, accessKey, accessSecret should be provided by the instructor.\n\nThe expression should only be triggered if preferredDeliveryType on cart has a value different to \"none\"."
				},
				{
					"name": "Create cart",
					"item": [
						{
							"name": "[Backend] Get customers",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/customers",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Customer sign-in | Oauth client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"import-host\", \"https://import.europe-west1.gcp.commercetools.com\");",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"me_access_token\", data.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{project-key}}/customers/token?grant_type=password&username={{customer-01-email}}&password=secret123",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{project-key}}",
										"customers",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{customer-01-email}}"
										},
										{
											"key": "password",
											"value": "secret123"
										},
										{
											"key": "scope",
											"value": "manage_my_profile:{{project-key}} manage_my_orders:{{project-key}} manage_shipping_methods:{{project-key}} manage_payments:{{project-key}} manage_my_payments:{{project-key}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Create new Cart & add to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"customerId\": \"{{customer-01-id}}\", //choose customer 01 or 02 id\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{prefered-delivery-type-id}}\"\n        },\n        \"fields\": {\n            \"preferredDeliveryType\": \"none\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Customer selects preferred delivery method (warehouse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-01-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setCustomType\",\n            \"type\": {\n                \"id\": \"{{prefered-delivery-type-id}}\",\n                \"typeId\": \"type\"\n            },\n            \"fields\": {\n                \"deliveryChannel\": {\n                    \"typeId\": \"channel\",\n                    \"id\": \"{{warehouse-channel-id}}\"\n                },\n                \"preferredDeliveryType\": \"warehouse\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-01-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-01-cart-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Get matching shipping methods",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods/matching-cart?cartId={{case-01-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods",
										"matching-cart"
									],
									"query": [
										{
											"key": "cartId",
											"value": "{{case-01-cart-id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Select shipping method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-cart-key\", data.key);",
											"}",
											"if(data.totalPrice.centAmount){",
											"    pm.environment.set(\"case-01-cart-total-amount\", data.totalPrice.centAmount);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-01-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setShippingMethod\",\n            \"shippingMethod\": {\n                \"id\": \"{{standard-shipping-method-id}}\", //choose standard or express shipping method id\n                \"typeId\": \"shipping-method\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-01-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-01-cart-id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Choose a customer"
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "[BFF] Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-payment-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-payment-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-payment-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-payment-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-payment-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-payment-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amountPlanned\": {\n        \"currencyCode\": \"AUD\",\n        \"centAmount\": {{case-01-cart-total-amount}}\n    },\n    \"customer\": {\n        \"typeId\": \"customer\",\n        \"id\": \"{{customer-01-id}}\"\n    },\n    \"paymentMethodInfo\": {\n        \"paymentInterface\": \"WE_DO_PAYMENTS\",\n        \"method\": \"CREDIT_CARD\",\n        \"name\": {\n            \"en\": \"Credit Card\"\n        }\n    },\n    \"transactions\": [\n        {\n            \"type\": \"Charge\",\n            \"amount\": {\n                \"currencyCode\": \"AUD\",\n                \"centAmount\": {{case-01-cart-total-amount}}\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/payments",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Add payment to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-01-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"addPayment\",\n            \"payment\": {\n                \"typeId\": \"payment\",\n                \"id\": \"{{case-01-payment-id}}\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-01-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-01-cart-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create order from Cart",
					"item": [
						{
							"name": "[BFF] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-01-order-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-01-order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-01-order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-01-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-01-order-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-01-cart-id}}\",\n    \"version\": {{case-01-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Merchant High-tech would like to migrate to Composable Commerce and to do this they need to set up the Shipping Methods as a POC. Our POC should be concerned about the functional requirements, API flow’s needed to build the experience but not develop the UI.\n\n- Merchant High-tech has one warehouse that fulfills online customer orders for Australia.\n- The warehouse will support:\n    - standard delivery (cost $5 AUD, free above $50 AUD)\n    - express delivery (cost $10 AUD, free above $100 AUD)\n- Shipping codes that should be passed to the ERP for the order:\n    - Standard warehouse delivery = warehouseStandard\n    - Express warehouse delivery = warehouseExpress\n- The presentation layer should show the following lead times for each Shipping Method\n    - Standard warehouse delivery = 3 - 5 business days\n    - Express warehouse delivery = 1 - 2 business days"
		},
		{
			"name": "Case 02 - Retail store click & collect",
			"item": [
				{
					"name": "Add timeZone field to channel",
					"item": [
						{
							"name": "[Backend] Add Time Zone field to Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"channel-type-id\", data.results[0].id); ",
											"    pm.environment.set(\"channel-type-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"channel-type-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"channel-type-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"channel-type-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"channel-type-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{channel-type-version}},\n    \"actions\": [\n        {\n            \"action\": \"addFieldDefinition\",\n            \"fieldDefinition\": {\n                \"type\": {\n                    \"name\": \"Enum\",\n                    \"values\": [\n                        {\n                            \"key\": \"aus-west\",\n                            \"label\": \"AUS Western Standard Time\"\n                        },\n                        {\n                            \"key\": \"aus-central\",\n                            \"label\": \"AUS Central Standard Time\"\n                        },\n                        {\n                            \"key\": \"aus-east\",\n                            \"label\": \"AUS Eastern Standard Time\"\n                        }\n                    ]\n                },\n                \"name\": \"timeZone\",\n                \"label\": {\n                    \"en\": \"Time Zone\"\n                },\n                \"required\": false\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/types/{{channel-type-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types",
										"{{channel-type-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add stores (channels)",
					"item": [
						{
							"name": "[Backend] aus-store-merchant-high-tech-altona",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-altona\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Altona\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3025\",\n        \"streetName\": \"124/134 Millers Rd\",\n        \"region\": \"Altona North\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.8487,\n            -37.8218\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-armadale",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-armadale\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Armadale\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6112\",\n        \"streetName\": \"224 Jull St\",\n        \"region\": \"Armadale\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            116.0108,\n            -32.1264\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-belmont",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-belmont\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Belmont\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6104\",\n        \"streetName\": \"Belmont Ave\",\n        \"region\": \"Belmont\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.9388,\n            -31.9521\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-booragoon",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-booragoon\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Booragoon\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6154\",\n        \"streetName\": \"125 Riseley St\",\n        \"region\": \"Booragoon\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8352,\n            -32.0214\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-broadmeadows",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-broadmeadows\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Broadmeadows\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3047\",\n        \"streetName\": \"1169 Pascoe Vale Rd\",\n        \"region\": \"Broadmeadows\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9228,\n            -37.6664\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-brunswick",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-brunswick\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Brunswick\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3056\",\n        \"streetName\": \"90/106 Sydney Rd\",\n        \"region\": \"Brunswick\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9565,\n            -37.7626\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-burwood",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-burwood\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Burwood\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3151\",\n        \"streetName\": \"172 Burwood Hwy\",\n        \"region\": \"Burwood East\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.1510,\n            -37.8468\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-camberwell",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-camberwell\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Camberwell\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3108\",\n        \"streetName\": \"15/25 Station St\",\n        \"region\": \"Camberwell\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.0600,\n            -37.8233\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-campbellfield",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-campbellfield\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Campbellfield\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3061\",\n        \"streetName\": \"1434 Sydney Rd\",\n        \"region\": \"Campbellfield\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9627,\n            -37.6773\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-caroline-springs",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-caroline-springs\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Caroline Springs\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3023\",\n        \"streetName\": \"29/35 Lake St\",\n        \"region\": \"Caroline Springs\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.7415,\n            -37.7237\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-carousel",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-carousel\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Carousel\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6107\",\n        \"streetName\": \"1382 Albany Hwy\",\n        \"region\": \"Cannington\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.9388,\n            -32.0051\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-clarkson",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-clarkson\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Clarkson\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6063\",\n        \"streetName\": \"36 Ocean Keys Blvd\",\n        \"region\": \"Clarkson\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.7183,\n            -31.6682\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-clayton",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"aus-store-merchant-high-tech-clayton\",\n  \"name\": {\n    \"en\": \"Merchant High-Tech Clayton\"\n  },\n  \"roles\": [\n    \"InventorySupply\"\n  ],\n  \"address\": {\n    \"country\": \"AU\",\n    \"state\": \"VIC\",\n    \"postalCode\": \"3168\",\n    \"streetName\": \"M.01/2107 Dandenong Rd\",\n    \"region\": \"Clayton\"\n  },\n  \"geoLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [\n      145.1403,\n      -37.9120\n    ]\n  },\n  \"custom\": {\n    \"type\": {\n      \"typeId\": \"type\",\n      \"id\": \"{{channel-type-id}}\"\n    },\n    \"fields\": {\n      \"deliveryType\": [\n        \"courierAsap\",\n        \"retailClickAndCollect\"\n      ],\n      \"timeZone\": \"aus-east\"\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-cockburn-gateway",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-cockburn-gateway\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Cockburn Gateway\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6164\",\n        \"streetName\": \"816 Beeliar Dr\",\n        \"region\": \"Success\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8584,\n            -32.0985\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-doncaster",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-doncaster\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Doncaster\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3108\",\n        \"streetName\": \"619 Doncaster Rd\",\n        \"region\": \"Doncaster\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.1272,\n            -37.7778\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-east-victoria-park",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-east-victoria-park\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech East Victoria Park\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6101\",\n        \"streetName\": \"Albany Hwy\",\n        \"region\": \"East Victoria Park\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.9018,\n            -31.9696\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-eastland",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-eastland\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Eastland\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3134\",\n        \"streetName\": \"171 Maroondah Hwy\",\n        \"region\": \"Ringwood\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.2294,\n            -37.8055\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-ellenbrook",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-ellenbrook\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Ellenbrook\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6069\",\n        \"streetName\": \"11 Main St\",\n        \"region\": \"Ellenbrook\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.9678,\n            -31.7627\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-footscray",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-footscray\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Footscray\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3011\",\n        \"streetName\": \"1/51 Paisley St\",\n        \"region\": \"Footscray\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9009,\n            -37.7919\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-greensborough",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-greensborough\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Greensborough\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3088\",\n        \"streetName\": \"25 Main St\",\n        \"region\": \"Greensborough\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.1040,\n            -37.6941\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-highpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-highpoint\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Highpoint\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3032\",\n        \"streetName\": \"120/200 Rosamond Rd\",\n        \"region\": \"Maribyrnong\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.8892,\n            -37.7588\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-innaloo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-innaloo\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Innaloo\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6018\",\n        \"streetName\": \"384 Scarborough Beach Rd\",\n        \"region\": \"Innaloo\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8008,\n            -31.8898\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-joondalup",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-joondalup\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Joondalup\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6027\",\n        \"streetName\": \"420 Joondalup Dr\",\n        \"region\": \"Joondalup\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.7780,\n            -31.7141\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-kardinya",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-kardinya\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Kardinya\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6163\",\n        \"streetName\": \"15 South St\",\n        \"region\": \"Kardinya\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8130,\n            -32.0391\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-keilor",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-keilor\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Keilor\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3038\",\n        \"streetName\": \"80 Taylors Rd\",\n        \"region\": \"Keilor Downs\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.8075,\n            -37.7143\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-knox",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-knox\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Knox\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3152\",\n        \"streetName\": \"425 Burwood Hwy\",\n        \"region\": \"Wantirna South\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.2431,\n            -37.8618\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-maddington",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-maddington\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Maddington\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6109\",\n        \"streetName\": \"Olga & Attfield Rds\",\n        \"region\": \"Maddington\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.9844,\n            -32.0391\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-melbourne-cbd",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-melbourne-cbd\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Melbourne Cbd\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3000\",\n        \"streetName\": \"236 Bourke St\",\n        \"region\": \"Melbourne\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9675,\n            -37.8064\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-midland",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-midland\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Midland\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6056\",\n        \"streetName\": \"Great Eastern Hwy\",\n        \"region\": \"Midland\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            116.0089,\n            -31.8740\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-mirrabooka",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-mirrabooka\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Mirrabooka\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6061\",\n        \"streetName\": \"Cnr Yirrigan Dr & Farrier Rd\",\n        \"region\": \"Mirrabooka\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8633,\n            -31.8543\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-moonee-ponds",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-moonee-ponds\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Moonee Ponds\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3039\",\n        \"streetName\": \"21/31 Hall St\",\n        \"region\": \"Moonee Ponds\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.9235,\n            -37.7528\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-morley",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-morley\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Morley\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6062\",\n        \"streetName\": \"Bishop St\",\n        \"region\": \"Morley\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8935,\n            -31.8857\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-perth-cbd",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-perth-cbd\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Perth Cbd\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6000\",\n        \"streetName\": \"712 Hay Street Mall\",\n        \"region\": \"Perth\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8571,\n            -31.9422\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-reservoir",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-reservoir\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Reservoir\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3072\",\n        \"streetName\": \"850 Plenty Rd\",\n        \"region\": \"Reservoir\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.0309,\n            -37.7162\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-richmond",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-richmond\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Richmond\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3121\",\n        \"streetName\": \"620 Victoria St\",\n        \"region\": \"Richmond\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            145.0113,\n            -37.8064\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-rockingham",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-rockingham\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Rockingham\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6168\",\n        \"streetName\": \"1 Council Ave\",\n        \"region\": \"Rockingham\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.7406,\n            -32.2790\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-wanneroo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-wanneroo\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Wanneroo\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6065\",\n        \"streetName\": \"950 Wanneroo Rd\",\n        \"region\": \"Wanneroo\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8133,\n            -31.7314\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-warwick",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-warwick\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Warwick\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"WA\",\n        \"postalCode\": \"6024\",\n        \"streetName\": \"643 Beach Rd\",\n        \"region\": \"Warwick\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.8083,\n            -31.8272\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-west\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-werribee",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-werribee\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Werribee\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"VIC\",\n        \"postalCode\": \"3030\",\n        \"streetName\": \"S/C Cnr Heaths & Derrimut Rds\",\n        \"region\": \"Hoppers Crossing\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            144.6838,\n            -37.8646\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"courierAsap\",\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] aus-store-merchant-high-tech-whitford-city",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"aus-store-merchant-high-tech-whitford-city\",\n    \"name\": {\n        \"en\": \"Merchant High-Tech Whitford City\"\n    },\n    \"roles\": [\n        \"InventorySupply\"\n    ],\n    \"address\": {\n        \"country\": \"AU\",\n        \"state\": \"Hillarys\",\n        \"postalCode\": \"WA\",\n        \"streetName\": \"Cnr Whitfords &\",\n        \"region\": \"Marmion Ave\"\n    },\n    \"geoLocation\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            115.7533,\n            -31.7748\n        ]\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{channel-type-id}}\"\n        },\n        \"fields\": {\n            \"deliveryType\": [\n                \"retailClickAndCollect\"\n            ],\n            \"timeZone\": \"aus-east\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/channels",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									]
								}
							},
							"response": []
						}
					],
					"description": "Run the whole folder",
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Import inventories",
					"item": [
						{
							"name": "[Backend] Create inventory import container",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"key\": \"case-02-import-container\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/import-containers",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"import-containers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-altona\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 163,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-altona\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-footscray\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 111,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-footscray\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-highpoint\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 279,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-highpoint\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-keilor\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 428,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-keilor\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-moonee-ponds\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 397,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-moonee-ponds\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-broadmeadows\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 158,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-broadmeadows\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-campbellfield\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 492,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-campbellfield\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-brunswick\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 155,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-brunswick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-melbourne-cbd\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 430,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-melbourne-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-richmond\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 441,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-richmond\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-reservoir\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 336,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-reservoir\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-greensborough\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 145,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-greensborough\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-camberwell\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 105,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-camberwell\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-doncaster\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 114,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-doncaster\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-burwood\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 452,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-burwood\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-eastland\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 314,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-eastland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-knox\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 201,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-knox\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-clayton\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 435,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clayton\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-caroline-springs\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 314,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-caroline-springs\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-werribee\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 100,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-werribee\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-whitford-city\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 386,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-whitford-city\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-joondalup\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 304,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-joondalup\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-ellenbrook\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 489,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-ellenbrook\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-warwick\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 381,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-warwick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-mirrabooka\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 362,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-mirrabooka\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-innaloo\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 113,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-innaloo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-morley\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 479,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-morley\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-midland\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 113,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-midland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-perth-cbd\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 411,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-perth-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-belmont\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 484,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-belmont\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-east-victoria-park\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 206,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-east-victoria-park\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-carousel\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 154,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-carousel\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-booragoon\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 246,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-booragoon\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-maddington\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 342,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-maddington\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-kardinya\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 427,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-kardinya\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-cockburn-gateway\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 302,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-cockburn-gateway\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-armadale\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 208,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-armadale\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-clarkson\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 333,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clarkson\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-wanneroo\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 401,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-wanneroo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-256gb-130-u3-a2-v30-aus-store-merchant-high-tech-rockingham\",\n            \"sku\": \"samsung-microsd-evo-256gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 189,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-rockingham\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-altona\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 414,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-altona\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-footscray\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 119,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-footscray\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-highpoint\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 279,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-highpoint\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-keilor\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 347,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-keilor\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-moonee-ponds\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 221,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-moonee-ponds\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-broadmeadows\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 357,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-broadmeadows\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-campbellfield\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 225,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-campbellfield\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-brunswick\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 286,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-brunswick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-melbourne-cbd\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 421,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-melbourne-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-richmond\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 379,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-richmond\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-reservoir\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 199,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-reservoir\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-greensborough\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 392,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-greensborough\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-camberwell\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 101,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-camberwell\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-doncaster\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 276,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-doncaster\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-burwood\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 252,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-burwood\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-eastland\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 350,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-eastland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-knox\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 297,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-knox\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-clayton\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 310,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clayton\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-caroline-springs\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 365,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-caroline-springs\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-werribee\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 421,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-werribee\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-whitford-city\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 478,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-whitford-city\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-joondalup\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 102,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-joondalup\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-ellenbrook\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 415,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-ellenbrook\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-warwick\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 282,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-warwick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-mirrabooka\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 374,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-mirrabooka\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-innaloo\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 149,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-innaloo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-morley\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 203,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-morley\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-midland\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 248,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-midland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-perth-cbd\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 426,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-perth-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-belmont\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 102,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-belmont\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-east-victoria-park\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 318,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-east-victoria-park\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-carousel\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 338,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-carousel\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-booragoon\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 368,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-booragoon\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-maddington\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 412,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-maddington\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-kardinya\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 157,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-kardinya\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-cockburn-gateway\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 177,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-cockburn-gateway\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-armadale\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 196,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-armadale\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-clarkson\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 243,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clarkson\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-wanneroo\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 389,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-wanneroo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-128gb-130-u3-a2-v30-aus-store-merchant-high-tech-rockingham\",\n            \"sku\": \"samsung-microsd-evo-128gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 433,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-rockingham\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-altona\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 381,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-altona\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-footscray\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 338,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-footscray\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-highpoint\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 425,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-highpoint\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-keilor\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 207,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-keilor\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-moonee-ponds\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 268,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-moonee-ponds\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-broadmeadows\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 149,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-broadmeadows\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-campbellfield\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 257,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-campbellfield\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-brunswick\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 386,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-brunswick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-melbourne-cbd\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 498,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-melbourne-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-richmond\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 495,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-richmond\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-reservoir\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 286,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-reservoir\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-greensborough\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 227,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-greensborough\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-camberwell\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 296,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-camberwell\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-doncaster\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 445,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-doncaster\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-burwood\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 286,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-burwood\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-eastland\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 417,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-eastland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-knox\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 399,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-knox\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-clayton\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 135,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clayton\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-caroline-springs\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 327,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-caroline-springs\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-werribee\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 450,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-werribee\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Import inventory 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"inventory-id\", data.results[0].id); ",
											"    pm.environment.set(\"inventory-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"inventory-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"inventory-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"inventory-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"inventory-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"inventory\",\n    \"resources\": [\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-whitford-city\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 411,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-whitford-city\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-joondalup\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 350,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-joondalup\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-ellenbrook\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 294,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-ellenbrook\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-warwick\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 103,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-warwick\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-mirrabooka\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 324,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-mirrabooka\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-innaloo\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 130,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-innaloo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-morley\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 164,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-morley\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-midland\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 199,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-midland\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-perth-cbd\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 238,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-perth-cbd\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-belmont\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 383,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-belmont\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-east-victoria-park\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 251,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-east-victoria-park\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-carousel\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 176,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-carousel\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-booragoon\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 423,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-booragoon\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-maddington\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 121,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-maddington\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-kardinya\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 482,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-kardinya\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-cockburn-gateway\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 392,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-cockburn-gateway\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-armadale\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 478,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-armadale\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-clarkson\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 362,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-clarkson\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-wanneroo\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 379,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-wanneroo\"\n            }\n        },\n        {\n            \"key\": \"inv-samsung-microsd-evo-512gb-130-u3-a2-v30-aus-store-merchant-high-tech-rockingham\",\n            \"sku\": \"samsung-microsd-evo-512gb-130-u3-a2-v30\",\n            \"quantityOnStock\": 489,\n            \"supplyChannel\": {\n                \"typeId\": \"channel\",\n                \"key\": \"aus-store-merchant-high-tech-rockingham\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{import-host}}/{{project-key}}/inventories/import-containers/case-02-import-container",
									"host": [
										"{{import-host}}"
									],
									"path": [
										"{{project-key}}",
										"inventories",
										"import-containers",
										"case-02-import-container"
									]
								}
							},
							"response": []
						}
					],
					"description": "Run the whole folder"
				},
				{
					"name": "Add and set customerLocalTime to cart",
					"item": [
						{
							"name": "[Backend] Add customerLocalTime to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.results[0].id); ",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{prefered-delivery-type-version}},\n    \"actions\": [\n        {\n            \"action\": \"addFieldDefinition\",\n            \"fieldDefinition\": {\n                \"type\": {\n                    \"name\": \"Time\"\n                },\n                \"name\": \"localTime\",\n                \"label\": {\n                    \"en\": \"Local time\"\n                },\n                \"required\": false\n            }\n        },\n        {\n            \"action\": \"addFieldDefinition\",\n            \"fieldDefinition\": {\n                \"type\": {\n                    \"name\": \"Enum\",\n                    \"values\": [\n                        {\n                            \"key\": \"aus-west\",\n                            \"label\": \"AUS Western Standard Time\"\n                        },\n                        {\n                            \"key\": \"aus-central\",\n                            \"label\": \"AUS Central Standard Time\"\n                        },\n                        {\n                            \"key\": \"aus-east\",\n                            \"label\": \"AUS Eastern Standard Time\"\n                        }\n                    ]\n                },\n                \"name\": \"timeZone\",\n                \"label\": {\n                    \"en\": \"Time Zone\"\n                },\n                \"required\": false\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/types/{{prefered-delivery-type-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types",
										"{{prefered-delivery-type-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add store collect shipping methods",
					"item": [
						{
							"name": "[Backend] Add Click and Collect (same day)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"same-day-click-and-collect-id\", data.results[0].id); ",
											"    pm.environment.set(\"same-day-click-and-collect-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"same-day-click-and-collect-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"same-day-click-and-collect-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"same-day-click-and-collect-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"same-day-click-and-collect-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Click & Collect (same day)\",\n    \"localizedName\": {\n        \"en\": \"Click & Collect (same day)\"\n    },\n    \"localizedDescription\": {\n        \"en\": \"Available same day after 30 minutes \"\n    },\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"zoneRates\": [\n        {\n            \"zone\": {\n                \"typeId\": \"zone\",\n                \"id\": \"{{zone-id}}\"\n            },\n            \"shippingRates\": [\n                {\n                    \"price\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 0,\n                        \"fractionDigits\": 2\n                    },\n                    \"freeAbove\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 0,\n                        \"fractionDigits\": 2\n                    }\n                }\n            ]\n        }\n    ],\n    \"predicate\": \"custom.preferredDeliveryType = \\\"retailClickAndCollect\\\" and custom.localTime >= \\\"01:00:00.000\\\" and custom.localTime <= \\\"15:30:00.000\\\"\",\n    \"key\": \"inStoreSameDay\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Add Click and Collect (next day)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"next-day-click-and-collect-id\", data.results[0].id); ",
											"    pm.environment.set(\"next-day-click-and-collect-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"next-day-click-and-collect-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"next-day-click-and-collect-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"next-day-click-and-collect-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"next-day-click-and-collect-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Click & Collect (next day)\",\n    \"localizedName\": {\n        \"en\": \"Click & Collect (next day)\"\n    },\n    \"localizedDescription\": {\n        \"en\": \"Available tomorrow\"\n    },\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"zoneRates\": [\n        {\n            \"zone\": {\n                \"typeId\": \"zone\",\n                \"id\": \"{{zone-id}}\"\n            },\n            \"shippingRates\": [\n                {\n                    \"price\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 0,\n                        \"fractionDigits\": 2\n                    },\n                    \"freeAbove\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 0,\n                        \"fractionDigits\": 2\n                    }\n                }\n            ]\n        }\n    ],\n    \"predicate\": \"custom.preferredDeliveryType = \\\"retailClickAndCollect\\\" and custom.localTime > \\\"15:30:00.000\\\" or custom.localTime < \\\"01:30:00.000\\\"\",\n    \"key\": \"inStoreNextDay\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									]
								}
							},
							"response": []
						}
					],
					"description": "Create a shipping method:\n\n- Click and collect same day\n    - Key: inStoreSameDay\n    - Description: Available same day after 30 minutes\n    - Predicate: Cart custom field deliveryType = retailClick&Collect AND cart localTime is between 01:00 AM - 03:30 PM\n    - Zone: Australia\n    - Rate $0 AUD\n\n- Click and collect next day\n    - Key: inStoreNextDay\n    - Description: Available tomorrow\n    - Predicate: Cart custom field deliveryType = retailClick&Collect AND cart localTime is not between 01:00 AM - 03:30 PM\n    - Zone: Australia\n    - Rate $0 AUD"
				},
				{
					"name": "Create Cart",
					"item": [
						{
							"name": "[BFF] Customer sign-in | Oauth client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"import-host\", \"https://import.europe-west1.gcp.commercetools.com\");",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"me_access_token\", data.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{auth_url}}/oauth/{{project-key}}/customers/token?grant_type=password&username={{customer-01-email}}&password=secret123&scopes=manage_my_profile:{{project-key}} manage_my_orders:{{project-key}} manage_shipping_methods:{{project-key}} manage_payments:{{project-key}} manage_my_payments:{{project-key}}",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{project-key}}",
										"customers",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{customer-01-email}}"
										},
										{
											"key": "password",
											"value": "secret123"
										},
										{
											"key": "scopes",
											"value": "manage_my_profile:{{project-key}} manage_my_orders:{{project-key}} manage_shipping_methods:{{project-key}} manage_payments:{{project-key}} manage_my_payments:{{project-key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Create new Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"customerId\": \"{{customer-01-id}}\", //choose customer 01 or 02 id\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 3\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 3,\n            \"quantity\": 1\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{prefered-delivery-type-id}}\"\n        },\n        \"fields\": {\n            \"preferredDeliveryType\": \"none\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find stores within range",
					"item": [
						{
							"name": "[BFF] Get stores within 20km range of customer",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/channels?limit=5&where=geoLocation within circle(115.9213, -32.0777, 20000) and custom(fields(deliveryType contains any (\"retailClickAndCollect\")))",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "where",
											"value": "geoLocation within circle(115.9213, -32.0777, 20000) and custom(fields(deliveryType contains any (\"retailClickAndCollect\")))"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Check inventory for selected channel",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/inventory?where=supplyChannel(id%3D%22{{id-of-channel-from-previous-call}}%22)",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"inventory"
									],
									"query": [
										{
											"key": "where",
											"value": "supplyChannel(id%3D%22{{id-of-channel-from-previous-call}}%22)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Select \"click&collect and choose preferred store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-cart-key\", data.key);",
											"}",
											"if(data.totalPrice.centAmount){",
											"    pm.environment.set(\"case-02-cart-total-amount\", data.totalPrice.centAmount);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-02-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setCustomType\",\n            \"type\": {\n                \"id\": \"{{prefered-delivery-type-id}}\",\n                \"typeId\": \"type\"\n            },\n            \"fields\": {\n                \"timeZone\": \"aus-west\", //get from customer every time they select a store\n                \"localTime\": \"17:00:00.000\", //get from customer every time they select a store\n                \"preferredDeliveryType\": \"retailClickAndCollect\",\n                \"deliveryChannel\": {\n                    \"typeId\": \"channel\",\n                    \"id\": \"78d16c7c-5fd6-4707-b277-e048a40653c7\" //get id from previous GET request\n                }\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-02-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-02-cart-id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Use one of the following customer geocodes:  \n115.8715, -31.9081\n\n115.9213, -32.0777\n\n115.8057, -31.8515\n\n115.8627, -31.8058\n\n144.9556, -37.7513\n\n145.1067, -37.8115\n\n145.1836, -37.8647\n\n144.8560, -37.7822"
				},
				{
					"name": "Set shipping method",
					"item": [
						{
							"name": "[BFF] Get matching shipping methods",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods/matching-cart?cartId={{case-02-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods",
										"matching-cart"
									],
									"query": [
										{
											"key": "cartId",
											"value": "{{case-02-cart-id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Same day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-cart-key\", data.key);",
											"}",
											"if(data.totalPrice.centAmount){",
											"    pm.environment.set(\"case-02-cart-total-amount\", data.totalPrice.centAmount);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-02-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setShippingMethod\",\n            \"shippingMethod\": {\n                \"id\": \"{{same-day-click-and-collect-id}}\",\n                \"typeId\": \"shipping-method\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-02-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-02-cart-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Next day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-cart-key\", data.key);",
											"}",
											"if(data.totalPrice.centAmount){",
											"    pm.environment.set(\"case-02-cart-total-amount\", data.totalPrice.centAmount);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-02-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setShippingMethod\",\n            \"shippingMethod\": {\n                \"id\": \"{{next-day-click-and-collect-id}}\",\n                \"typeId\": \"shipping-method\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-02-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-02-cart-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "[BFF] Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-payment-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-payment-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-payment-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-payment-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-payment-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-payment-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amountPlanned\": {\n        \"currencyCode\": \"AUD\",\n        \"centAmount\": {{case-02-cart-total-amount}}\n    },\n    \"customer\": {\n        \"typeId\": \"customer\",\n        \"id\": \"{{customer-02-id}}\"\n    },\n    \"paymentMethodInfo\": {\n        \"paymentInterface\": \"WE_DO_PAYMENTS\",\n        \"method\": \"CREDIT_CARD\",\n        \"name\": {\n            \"en\": \"Credit Card\"\n        }\n    },\n    \"transactions\": [\n        {\n            \"type\": \"Charge\",\n            \"amount\": {\n                \"currencyCode\": \"AUD\",\n                \"centAmount\": {{case-02-cart-total-amount}}\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/payments",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Add payment to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-02-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"addPayment\",\n            \"payment\": {\n                \"typeId\": \"payment\",\n                \"id\": \"{{case-02-payment-id}}\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-02-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-02-cart-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create order from Cart",
					"item": [
						{
							"name": "[BFF] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-02-order-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-02-order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-02-order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-02-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-02-order-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-02-cart-id}}\",\n    \"version\": {{case-02-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "High-tech has 80 retail stores, each with their own inventory level. A customer should be able to order online and pick up (Click & Collect/ BOPIS) from a store if the items are instock for the cart.\n\n- All click and collect orders will be ready for pick-up on the same day when the order is made between 01:00 AM - 3:30 PM. All orders made after this time should clearly communicate that they will be ready next business day.\n- Cost: Free\n- Shipping codes that should be passed to the ERP for the order:\n    - Click and collect same day = inStoreSameDay\n    - Click and collect business day = inStoreNextDay\n\nThe customer experience should follow:\n\n1. Cart has items and customer is on the checkout page\n2. Customer can see delivery options: Delivery and Click & Collect\n3. Customer selects Click & Collect\n4. System: displays a postcode / suburb input\n5. Customer inputs values\n    1. System: sends values to address validator service with valid suggestions returned\n    2. System: displays valid suggestions in UI\n    3. Customer selects one if the valid options\n    4. System: takes selected option, gets it’s geocode and finds the closest 5 retail stores within 20 KM radius. Checks the stock for each matching retail store\n6. System: displays matching retail stores sorted by distance to the customer (no more than 5 stores should be displayed). As Well as displaying which retails stores have enough stock\n7. Customer: selects one retail store that has stock\n8. System: Assigns selected retail store for click & collect\n9. Shipping step completed. Customer can more to next checkout step\n10. FLOW ENDED\n    \n\nAll Click & Collect orders must be ready for pick up within 30 minutes of order creation. How can we support this?"
		},
		{
			"name": "Case 03 - Same day courier delivery",
			"item": [
				{
					"name": "Add \"Same day delivery\" shipping method",
					"item": [
						{
							"name": "[Backend] Add same day delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"same-day-courier-asap-id\", data.results[0].id); ",
											"    pm.environment.set(\"same-day-courier-asap-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"same-day-courier-asap-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"same-day-courier-asap-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"same-day-courier-asap-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"same-day-courier-asap-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Same day delivery\",\n    \"localizedName\": {\n        \"en\": \"Same day delivery\"\n    },\n    \"localizedDescription\": {\n        \"en\": \"Same day delivery\"\n    },\n    \"taxCategory\": {\n        \"typeId\": \"tax-category\",\n        \"id\": \"{{tax-category-id}}\"\n    },\n    \"zoneRates\": [\n        {\n            \"zone\": {\n                \"typeId\": \"zone\",\n                \"id\": \"{{zone-id}}\"\n            },\n            \"shippingRates\": [\n                {\n                    \"price\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 1200,\n                        \"fractionDigits\": 2\n                    },\n                    \"freeAbove\": {\n                        \"type\": \"centPrecision\",\n                        \"currencyCode\": \"AUD\",\n                        \"centAmount\": 100000,\n                        \"fractionDigits\": 2\n                    }\n                }\n            ]\n        }\n    ],\n    \"predicate\": \"custom.preferredDeliveryType = \\\"courierAsap\\\" and custom.localTime >= \\\"01:00:00.000\\\" and custom.localTime <= \\\"15:00:00.000\\\"\",\n    \"key\": \"storeSameDay\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add deliveryTrackingUrl to cart",
					"item": [
						{
							"name": "[Backend] Add deliveryTrackingUrl to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.results[0].id); ",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"prefered-delivery-type-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"prefered-delivery-type-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"prefered-delivery-type-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{prefered-delivery-type-version}},\n    \"actions\": [\n        {\n            \"action\": \"addFieldDefinition\",\n            \"fieldDefinition\": {\n                \"type\": {\n                    \"name\": \"String\"\n                },\n                \"name\": \"deliveryTrackingUrl\",\n                \"label\": {\n                    \"en\": \"Delivery Tracking URL\"\n                },\n                \"required\": false\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/types/{{prefered-delivery-type-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types",
										"{{prefered-delivery-type-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create cart and add items to it",
					"item": [
						{
							"name": "[BFF] Customer sign-in | Oauth client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"import-host\", \"https://import.europe-west1.gcp.commercetools.com\");",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"me_access_token\", data.access_token);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{auth_url}}/oauth/{{project-key}}/customers/token?grant_type=password&username={{customer-01-email}}&password=secret123&scopes=manage_my_profile:{{project-key}} manage_my_orders:{{project-key}} manage_shipping_methods:{{project-key}} manage_payments:{{project-key}} manage_my_payments:{{project-key}}",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{project-key}}",
										"customers",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										},
										{
											"key": "username",
											"value": "{{customer-01-email}}"
										},
										{
											"key": "password",
											"value": "secret123"
										},
										{
											"key": "scopes",
											"value": "manage_my_profile:{{project-key}} manage_my_orders:{{project-key}} manage_shipping_methods:{{project-key}} manage_payments:{{project-key}} manage_my_payments:{{project-key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Create new Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"customerId\": \"{{customer-01-id}}\", //choose customer 01 or 02 id\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 3,\n            \"quantity\": 3\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 3\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"typeId\": \"type\",\n            \"id\": \"{{prefered-delivery-type-id}}\"\n        },\n        \"fields\": {\n            \"preferredDeliveryType\": \"none\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer selects \"Same day delivery\"",
					"item": [
						{
							"name": "[BFF] Customer selects same day delivery as shipping method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-03-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setCustomType\",\n            \"type\": {\n                \"id\": \"{{prefered-delivery-type-id}}\",\n                \"typeId\": \"type\"\n            },\n            \"fields\": {\n                \"timeZone\": \"aus-west\", //update every time cart gets updated and right before order creation\n                \"localTime\": \"14:00:00.000\", //update every time cart gets updated and right before order creation\n                \"preferredDeliveryType\": \"courierAsap\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-03-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-03-cart-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find store within range",
					"item": [
						{
							"name": "[BFF] Get stores within 15km range of customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-closest-store-id\", data.results[0].id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/channels?where=geoLocation within circle(115.9213, -32.0777, 15000) and custom(fields(deliveryType contains any (\"courierAsap\")))&limit=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									],
									"query": [
										{
											"key": "where",
											"value": "geoLocation within circle(115.9213, -32.0777, 15000) and custom(fields(deliveryType contains any (\"courierAsap\")))"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Check inventory for selected channel",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/inventory?where=supplyChannel(id%3D%22{{case-03-closest-store-id}}%22)",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"inventory"
									],
									"query": [
										{
											"key": "where",
											"value": "supplyChannel(id%3D%22{{case-03-closest-store-id}}%22)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Get courier availability",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// See example request",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://openapi.dummydelivery.com/drive/quotes",
									"protocol": "https",
									"host": [
										"openapi",
										"dummydelivery",
										"com"
									],
									"path": [
										"drive",
										"quotes"
									]
								}
							},
							"response": [
								{
									"name": "Get courier availability",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"external_delivery_id\": \"D-1763\",\n    \"locale\": \"en\",\n    \"order_fulfillment_method\": \"standard\",\n    \"origin_facility_id\": \"MERCHANTA-CA-1\",\n    \"pickup_address\": \"816 beeliar drive, success, wa 6164\",\n    \"pickup_business_name\": \"High-Tech Cockburn Gateway\",\n    \"pickup_phone_number\": \"1800 124 125\",\n    \"pickup_instructions\": \"Go to gate 3\",\n    \"pickup_reference_tag\": \"{{cartID}}\", // use the cartId as the reference\n    \"pickup_external_business_id\": \"ase-243-dzs\",\n    \"pickup_external_store_id\": \"ase-243-dzs\",\n    \"dropoff_address\": \"13 Ridge Rd, Cockburn Central, WA 6164\",\n    \"dropoff_business_name\": \"\",\n    \"dropoff_phone_number\": \"\",\n    \"dropoff_instructions\": \"Enter gate code 1234 on the callbox.\",\n    \"dropoff_contact_given_name\": \"Jeremy\",\n    \"dropoff_contact_family_name\": \"Clarkson\",\n    \"dropoff_contact_send_notifications\": true,\n    \"dropoff_options\": {\n        \"signature\": \"required\",\n        \"id_verification\": \"required\",\n        \"proof_of_delivery\": \"photo_required\"\n    },\n    \"shopping_options\": {\n        \"payment_method\": \"red_card\",\n        \"payment_barcode\": \"12345\",\n        \"payment_gift_cards\": [\n            \"123443434\",\n            \"123443435\"\n        ],\n        \"ready_for_pickup_by\": \"2024-08-22T17:20:28Z\"\n    },\n    \"order_value\": 1999,\n    \"items\": [\n        {\n            \"name\": \"Samsung Evo Plus\",\n            \"description\": \"\",\n            \"quantity\": 2,\n            \"external_id\": \"123-123443434b\",\n            \"external_instance_id\": 12,\n            \"volume\": 5.3,\n            \"weight\": 2.8,\n            \"length\": 2.8,\n            \"width\": 2.8,\n            \"height\": 2.8,\n            \"price\": 1000,\n            \"barcode\": 12342830041,\n            \"item_options\": {\n                \"substitute_item_ids\": [\n                    \"123443434\",\n                    \"123443435\"\n                ],\n                \"weight_unit\": \"gm\",\n                \"substitution_preference\": \"refund\"\n            }\n        }\n    ],\n    \"pickup_time\": \"2024-08-22T17:20:28Z\",\n    \"dropoff_time\": \"2024-08-22T17:20:28Z\",\n    \"pickup_window\": {\n        \"start_time\": \"2024-08-22T17:20:28Z\",\n        \"end_time\": \"2024-08-22T17:20:28Z\"\n    },\n    \"dropoff_window\": {\n        \"start_time\": \"2024-08-22T17:20:28Z\",\n        \"end_time\": \"2024-08-22T17:20:28Z\"\n    },\n    \"contactless_dropoff\": false,\n    \"action_if_undeliverable\": \"return_to_pickup\",\n    \"tip\": 599,\n    \"order_contains\": {\n        \"alcohol\": false\n    },\n    \"driver_allowed_vehicles\": [\n        \"car\",\n        \"bicycle\",\n        \"walking\"\n    ],\n    \"dropoff_requires_signature\": false,\n    \"promotion_id\": \"ee680b87-0016-496e-ac3c-d3f33ab54c1c\",\n    \"dropoff_cash_on_delivery\": 1999,\n    \"delivery_status\": \"quote\",\n    \"cancellation_reason\": \"cancelled_by_creator\",\n    \"updated_at\": \"2018-08-22T17:20:28Z\",\n    \"pickup_time_estimated\": \"2018-08-22T17:20:28Z\",\n    \"pickup_time_actual\": \"2018-08-22T17:20:28Z\",\n    \"dropoff_time_estimated\": \"2018-08-22T17:20:28Z\",\n    \"dropoff_time_actual\": \"2018-08-22T17:20:28Z\",\n    \"return_time_estimated\": \"2018-08-22T17:20:28Z\",\n    \"return_time_actual\": \"2018-08-22T17:20:28Z\",\n    \"return_address\": \"901 Market Street 6th Floor San Francisco, CA 94103\",\n    \"fee\": 1900,\n    \"fee_components\": [\n        {\n            \"type\": \"distance_based_fee\",\n            \"amount\": 1900\n        }\n    ],\n    \"tax\": 520,\n    \"tax_components\": [\n        {\n            \"type\": \"gst_hst\",\n            \"amount\": 520\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://openapi.dummydelivery.com/drive/quotes",
											"protocol": "https",
											"host": [
												"openapi",
												"dummydelivery",
												"com"
											],
											"path": [
												"drive",
												"quotes"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"external_delivery_id\": \"D-1763\",\n    \"locale\": \"en\",\n    \"order_fulfillment_method\": \"standard\",\n    \"origin_facility_id\": \"MERCHANTA-CA-1\",\n    \"pickup_address\": \"816 beeliar drive, success, wa 6164\",\n    \"pickup_business_name\": \"High-Tech Cockburn Gateway\",\n    \"pickup_phone_number\": \"1800 124 125\",\n    \"pickup_instructions\": \"Go to gate 3\",\n    \"pickup_reference_tag\": \"{{cartID}}\", // use the cartId as the reference\n    \"pickup_external_business_id\": \"ase-243-dzs\",\n    \"pickup_external_store_id\": \"ase-243-dzs\",\n    \"dropoff_address\": \"13 Ridge Rd, Cockburn Central, WA 6164\",\n    \"dropoff_business_name\": \"\",\n    \"dropoff_phone_number\": \"\",\n    \"dropoff_instructions\": \"Enter gate code 1234 on the callbox.\",\n    \"dropoff_contact_given_name\": \"John\",\n    \"dropoff_contact_family_name\": \"Doe\",\n    \"dropoff_contact_send_notifications\": true,\n    \"dropoff_options\": {\n        \"signature\": \"required\",\n        \"id_verification\": \"required\",\n        \"proof_of_delivery\": \"photo_required\"\n    },\n    \"shopping_options\": {\n        \"payment_method\": \"red_card\",\n        \"payment_barcode\": \"12345\",\n        \"payment_gift_cards\": [\n            \"123443434\",\n            \"123443435\"\n        ],\n        \"ready_for_pickup_by\": \"2024-08-22T17:20:28Z\"\n    },\n    \"order_value\": 1999,\n    \"items\": [\n        {\n            \"name\": \"Samsung Evo Plus\",\n            \"description\": \"\",\n            \"quantity\": 2,\n            \"external_id\": \"123-123443434b\",\n            \"external_instance_id\": 12,\n            \"volume\": 5.3,\n            \"weight\": 2.8,\n            \"length\": 2.8,\n            \"width\": 2.8,\n            \"height\": 2.8,\n            \"price\": 1000,\n            \"barcode\": 12342830041,\n            \"item_options\": {\n                \"substitute_item_ids\": [\n                    \"123443434\",\n                    \"123443435\"\n                ],\n                \"weight_unit\": \"gm\",\n                \"substitution_preference\": \"refund\"\n            }\n        }\n    ],\n    \"pickup_time\": \"2024-08-22T17:20:28Z\",\n    \"dropoff_time\": \"2024-08-22T17:20:28Z\",\n    \"pickup_window\": {\n        \"start_time\": \"2024-08-22T17:20:28Z\",\n        \"end_time\": \"2024-08-22T17:20:28Z\"\n    },\n    \"dropoff_window\": {\n        \"start_time\": \"2024-08-22T17:20:28Z\",\n        \"end_time\": \"2024-08-22T17:20:28Z\"\n    },\n    \"contactless_dropoff\": false,\n    \"action_if_undeliverable\": \"return_to_pickup\",\n    \"tip\": 599,\n    \"order_contains\": {\n        \"alcohol\": false\n    },\n    \"driver_allowed_vehicles\": [\n        \"car\",\n        \"bicycle\",\n        \"walking\"\n    ],\n    \"dropoff_requires_signature\": false,\n    \"promotion_id\": \"ee680b87-0016-496e-ac3c-d3f33ab54c1c\",\n    \"dropoff_cash_on_delivery\": 1999,\n\n    \"support_reference\": \"86313\",\n    \"tracking_url\": \"https:///openapi.dummydelivery.com/tracking?id=863313\",\n    \"dropoff_verification_image_url\": \"https:///openapi.dummydelivery-static.s3...\",\n    \"pickup_verification_image_url\": \"https:///openapi.dummydelivery-static.s3...\",\n    \"dropoff_signature_image_url\": \"https:///openapi.dummydelivery-static.s3...\",\n    \"shipping_label\": {\n        \"label_format\": \"zpl\",\n        \"label_size\": \"4x6\",\n        \"print_density\": \"203dpi\",\n        \"label_string\": \"XlhBCl5DRjAsNjAKXkZPNTAsNTBeRkRTdG9yZU5hbWVeRlMKXkNGMCwzMApeRk81MCwxMTVeRkRTaGlwcGVkIDAxLzE2LzIwMjNeRlMKXkZPNjUwLDYwXkZENS4zIGxic15GUwpeRk82NTAsMTAwXkZEQ0hJLTJeRlMKXkZPNTAsMTcwXkdCNzAwLDMsM15GUwpeQ0YwLDgwCl5GTzUwLDIyNV5GREpvaG4gRG9lXkZTCl5DRkEsMzYKXkZPNTAsMzMwXkZENnRoIEZsb29yXkZTCl5GTzUwLDM4NV5GRDkwMSBNYXJrZXQgU3RyZWV0XkZTCl5GTzUwLDQ0MF5GRFNhbiBGcmFuY2lzY28sIENBIDk0MTAzXkZTCl5GTzUwLDUyMF5HQjcwMCwzLDNeRlMKXkJZMiwzLDIwMApeRk81MCw1NzVeQkNeRkRKM0Q0VE5HUU1QR0FLSE5VNlZSSlA4RjkyRDE3WV5GUwpeQlFOLDIsNwpeRk81NzUsNzc1XkZEUUEsSjNENFROR1FNUEdBS0hOVTZWUkpQOEY5MkQxN1leRlMKXkNGQSwyNApeRk81MCw4NTBeRkRSZWYjIDEyMy0xMjM0NDM0MzRiXkZTCl5DRkEsMzZeRk81MCwxMDUwXkZERGVsaXZlcmVkXkZTCl5DRkIsMzZeRk81MCwxMTAwXkZEQnkgRGFzaExpbmteRlMKXlha==\"\n    }\n}"
								}
							]
						},
						{
							"name": "[BFF] Assign preferred store to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-cart-key\", data.key);",
											"}",
											"if(data.totalPrice.centAmount){",
											"    pm.environment.set(\"case-03-cart-total-amount\", data.totalPrice.centAmount);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-03-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"setCustomType\",\n            \"type\": {\n                \"id\": \"{{prefered-delivery-type-id}}\",\n                \"typeId\": \"type\"\n            },\n            \"fields\": {\n                \"timeZone\": \"aus-west\", //update every time cart gets updated and right before order creation\n                \"localTime\": \"14:00:00.000\", //update every time cart gets updated and right before order creation\n                \"preferredDeliveryType\": \"courierAsap\",\n                \"deliveryChannel\": {\n                    \"typeId\": \"channel\",\n                    \"id\": \"{{case-03-closest-store-id}}\"\n                },\n                \"deliveryTrackingUrl\": \"{{tracking-url}}\" //get from checking courier availability\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-03-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-03-cart-id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Use one of the following customer geocodes:  \n115.8715, -31.9081\n\n115.9213, -32.0777\n\n115.8057, -31.8515\n\n115.8627, -31.8058\n\n144.9556, -37.7513\n\n145.1067, -37.8115\n\n145.1836, -37.8647\n\n144.8560, -37.7822"
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "[BFF] Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-payment-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-payment-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-payment-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-payment-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-payment-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-payment-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amountPlanned\": {\n        \"currencyCode\": \"AUD\",\n        \"centAmount\": {{case-03-cart-total-amount}}\n    },\n    \"customer\": {\n        \"typeId\": \"customer\",\n        \"id\": \"{{customer-01-id}}\"\n    },\n    \"paymentMethodInfo\": {\n        \"paymentInterface\": \"STRIPE\",\n        \"method\": \"CREDIT_CARD\",\n        \"name\": {\n            \"en\": \"Credit Card\"\n        }\n    },\n    \"transactions\": [\n        {\n            \"type\": \"Charge\",\n            \"amount\": {\n                \"currencyCode\": \"AUD\",\n                \"centAmount\": {{case-03-cart-total-amount}}\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/payments",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "[BFF] Add payment to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-03-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"addPayment\",\n            \"payment\": {\n                \"typeId\": \"payment\",\n                \"id\": \"{{case-03-payment-id}}\"\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/carts/{{case-03-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"carts",
										"{{case-03-cart-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Order from Cart",
					"item": [
						{
							"name": "[BFF] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"case-03-order-id\", data.results[0].id); ",
											"    pm.environment.set(\"case-03-order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"case-03-order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"case-03-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"case-03-order-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{me_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-03-cart-id}}\",\n    \"version\": {{case-03-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Case 00 - Data preparation",
					"item": [
						{
							"name": "[Backend] Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Get customer 01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.results && data.results[0]){",
											"    pm.globals.set(\"customer-01-id\", data.results[0].id);",
											"    pm.globals.set(\"customer-01-email\", data.results[0].email);",
											"    pm.globals.set(\"customer-01-address-street-name\", data.results[0].addresses[0].streetName);",
											"    pm.globals.set(\"customer-01-address-street-nr\", data.results[0].addresses[0].streetNumber);",
											"    pm.globals.set(\"customer-01-address-city\", data.results[0].addresses[0].city);",
											"    pm.globals.set(\"customer-01-address-country\", data.results[0].addresses[0].country);",
											"    pm.globals.set(\"customer-01-address-state\", data.results[0].addresses[0].state);",
											"    pm.globals.set(\"customer-01-address-postal-code\", data.results[0].addresses[0].postalCode);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/customers",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Get default shipping method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.results && data.results[0]){",
											"    pm.globals.set(\"standard-shipping-method-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/shipping-methods?where=isDefault=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"shipping-methods"
									],
									"query": [
										{
											"key": "where",
											"value": "isDefault=true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Get cart/order custom type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.id){",
											"    pm.globals.set(\"prefered-delivery-type-id\", data.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/types/key={{order-custom-type-key}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"types",
										"key={{order-custom-type-key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Get warehouse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.results && data.results[0] && data.results[0].id){",
											"    pm.globals.set(\"warehouse-channel-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{project-key}}/channels?where=key={{warehouse-channel-key}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"channels"
									],
									"query": [
										{
											"key": "where",
											"value": "key={{warehouse-channel-key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Backend] Revoke access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"ctp_access_token\", \"\");",
											"pm.environment.set(\"project-key\", \"\");",
											"pm.environment.set(\"store-key\", \"\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token/revoke",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token",
										"revoke"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case 01 - Guest user -> logged in customer",
					"item": [
						{
							"name": "[SPA] Obtain access token | client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-client-credentials-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] View products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0]){",
											"    pm.environment.set(\"product-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{projectKey}}/product-projections/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"product-projections",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Sign in a customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.customer && data.customer.id){",
											"    pm.environment.set(\"customer-01-id\", data.customer.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{customer-01-email}}\",\n    \"password\": \"{{customer-01-password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | password flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-password-scope}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{customer-01-email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{customer-01-password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/customers/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"customers",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create a customer cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-cart-id\", data.id); ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"shippingMethod\": {\n        \"id\": \"{{standard-shipping-method-id}}\",\n        \"typeId\": \"shipping-method\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"id\": \"{{prefered-delivery-type-id}}\",\n            \"typeId\": \"type\"\n        },\n        \"fields\": {\n            \"deliveryChannel\": {\n                \"typeId\": \"channel\",\n                \"id\": \"{{warehouse-channel-id}}\"\n            },\n            \"preferredDeliveryType\": \"warehouse\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-01-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-order-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-01-cart-id}}\",\n    \"version\": {{case-01-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case 02 - Guest user -> anonymous user",
					"item": [
						{
							"name": "[SPA] Obtain access token | client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-client-credentials-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] View products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0]){",
											"    pm.environment.set(\"product-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{projectKey}}/product-projections/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"product-projections",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | anonymous flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-anonymous-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/anonymous/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"anonymous",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create an anonymous cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-02-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-02-cart-id\", data.id); ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"shippingMethod\": {\n        \"id\": \"{{standard-shipping-method-id}}\",\n        \"typeId\": \"shipping-method\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"id\": \"{{prefered-delivery-type-id}}\",\n            \"typeId\": \"type\"\n        },\n        \"fields\": {\n            \"deliveryChannel\": {\n                \"typeId\": \"channel\",\n                \"id\": \"{{warehouse-channel-id}}\"\n            },\n            \"preferredDeliveryType\": \"warehouse\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-01-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-01-order-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-02-cart-id}}\",\n    \"version\": {{case-02-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case 03 - Guest user -> anonymous user -> create account",
					"item": [
						{
							"name": "[Script] Obtain fake customer data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data) {",
											"    const randomLetters = pm.globals.get(\"randomLetters\");",
											"    const randomFirstName = data.first_name;",
											"    const randomLastName = data.last_name;",
											"    const randomEmail = data.email;",
											"    const randomPassword = data.password;",
											"    const randomKey = \"customer-\" + randomLetters;",
											"    pm.environment.set(\"spa-new-customer-firstname\", randomFirstName);",
											"    pm.environment.set(\"spa-new-customer-lastname\", randomLastName);",
											"    pm.environment.set(\"spa-new-customer-email\", randomEmail);",
											"    pm.environment.set(\"spa-new-customer-password\", randomPassword);",
											"    pm.environment.set(\"spa-new-customer-key\", randomKey);",
											"    console.log({randomFirstName, randomLastName, randomEmail, randomPassword, randomKey})",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://random-data-api.com/api/v2/users?size=1&response_type=json",
									"protocol": "https",
									"host": [
										"random-data-api",
										"com"
									],
									"path": [
										"api",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "response_type",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-client-credentials-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] View products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0]){",
											"    pm.environment.set(\"product-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{projectKey}}/product-projections/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"product-projections",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | anonymous flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-anonymous-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/anonymous/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"anonymous",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create an anonymous cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-03-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-cart-id\", data.id); ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"shippingMethod\": {\n        \"id\": \"{{standard-shipping-method-id}}\",\n        \"typeId\": \"shipping-method\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"id\": \"{{prefered-delivery-type-id}}\",\n            \"typeId\": \"type\"\n        },\n        \"fields\": {\n            \"deliveryChannel\": {\n                \"typeId\": \"channel\",\n                \"id\": \"{{warehouse-channel-id}}\"\n            },\n            \"preferredDeliveryType\": \"warehouse\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create an account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.customer && data.customer.addresses && data.customer.addresses[0] && data.customer.addresses[0].id) {",
											"    pm.environment.set(\"case-03-customer-address-id\", data.customer.addresses[0].id);",
											"    pm.environment.set(\"case-03-customer-address-street-name\", data.customer.addresses[0].streetName);",
											"    pm.environment.set(\"case-03-customer-address-street-nr\", data.customer.addresses[0].streetNumber);",
											"    pm.environment.set(\"case-03-customer-address-postal-code\", data.customer.addresses[0].postalCode);",
											"    pm.environment.set(\"case-03-customer-address-city\", data.customer.addresses[0].city);",
											"    pm.environment.set(\"case-03-customer-address-state\", data.customer.addresses[0].state);",
											"    pm.environment.set(\"case-03-customer-address-country\", data.customer.addresses[0].country);",
											"}",
											"if(data && data.cart) {",
											"    pm.environment.set(\"case-03-customer-cart-id\", data.cart.id);",
											"    pm.environment.set(\"case-03-customer-cart-version\", data.cart.version);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{spa-new-customer-firstname}}\",\n    \"lastName\": \"{{spa-new-customer-lastname}}\",\n    \"email\": \"{{spa-new-customer-email}}\",\n    \"password\": \"{{spa-new-customer-password}}\",\n    \"isEmailVerified\": true,\n    \"addresses\": [\n        {\n            \"streetName\": \"{{customer-01-address-street-name}}\",\n            \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n            \"postalCode\": \"{{customer-01-address-postal-code}}\",\n            \"city\": \"{{customer-01-address-city}}\",\n            \"country\": \"{{customer-01-address-country}}\",\n            \"state\": \"{{customer-01-address-state}}\"\n        }\n    ],\n    \"defaultShippingAddress\": 0,\n    \"defaultBillingAddress\": 0,\n    \"key\": \"{{spa-new-customer-key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/signup",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | password flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{spa-new-customer-email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{spa-new-customer-password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-password-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/customers/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"customers",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Add item to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-03-customer-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-customer-cart-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{case-03-customer-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"addLineItem\",\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts/{{case-03-customer-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts",
										"{{case-03-customer-cart-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-03-customer-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-03-customer-order-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{case-03-customer-cart-id}}\",\n    \"version\": {{case-03-customer-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case 04 - Guest user -> anonymous user -> logged in customer",
					"item": [
						{
							"name": "[SPA] Obtain access token | client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-client-credentials-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] View products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0]){",
											"    pm.environment.set(\"product-id\", data.results[0].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{projectKey}}/product-projections/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"product-projections",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | anonymous flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-anonymous-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/anonymous/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"anonymous",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create an anonymous cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"case-04-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"case-04-cart-id\", data.id); ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"AUD\",\n    \"country\": \"AU\",\n    \"lineItems\": [\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        },\n        {\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"shippingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"billingAddress\": {\n        \"streetName\": \"{{customer-01-address-street-name}}\",\n        \"streetNumber\": \"{{customer-01-address-street-nr}}\",\n        \"postalCode\": \"{{customer-01-address-postal-code}}\",\n        \"country\": \"{{customer-01-address-country}}\",\n        \"state\": \"{{customer-01-address-state}}\"\n    },\n    \"shippingMethod\": {\n        \"id\": \"{{standard-shipping-method-id}}\",\n        \"typeId\": \"shipping-method\"\n    },\n    \"custom\": {\n        \"type\": {\n            \"id\": \"{{prefered-delivery-type-id}}\",\n            \"typeId\": \"type\"\n        },\n        \"fields\": {\n            \"deliveryChannel\": {\n                \"typeId\": \"channel\",\n                \"id\": \"{{warehouse-channel-id}}\"\n            },\n            \"preferredDeliveryType\": \"warehouse\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Sign in a customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data && data.customer && data.customer.id){",
											"    pm.environment.set(\"customer-01-id\", data.customer.id);",
											"}",
											"if(data && data.cart && data.cart.id){",
											"    pm.environment.set(\"customer-01-cart-id\", data.cart.id);",
											"    pm.environment.set(\"customer-01-cart-version\", data.cart.version);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{customer-01-email}}\",\n    \"password\": \"{{customer-01-password}}\",\n    \"activeCartSignInMode\": \"MergeWithExistingCustomerCart\", // non-default value \"UseAsNewActiveCustomerCart\"\n    \"updateProductData\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Obtain access token | password flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"    pm.environment.set(\"ctp_refresh_token\", data.refresh_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{customer-01-email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{customer-01-password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{spa-password-scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/{{projectKey}}/customers/token",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"{{projectKey}}",
										"customers",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Add item to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"customer-01-cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"customer-01-cart-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{customer-01-cart-version}},\n    \"actions\": [\n        {\n            \"action\": \"addLineItem\",\n            \"productId\": \"{{product-id}}\",\n            \"variantId\": 1,\n            \"quantity\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{projectKey}}/me/carts/{{customer-01-cart-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{projectKey}}",
										"me",
										"carts",
										"{{customer-01-cart-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Create order from cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.version){",
											"    pm.environment.set(\"customer-01-order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"customer-01-order-id\", data.id); ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{customer-01-cart-id}}\",\n    \"version\": {{customer-01-cart-version}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/me/orders/",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"me",
										"orders",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Revoke access/refresh tokens",
					"item": [
						{
							"name": "[SPA] Revoke access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"ctp_access_token\", \"\");",
											"pm.environment.set(\"project-key\", \"\");",
											"pm.environment.set(\"store-key\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{ctp_access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token/revoke",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPA] Revoke refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"pm.environment.set(\"ctp_refresh_token\", \"\");",
											"pm.environment.set(\"project-key\", \"\");",
											"pm.environment.set(\"store-key\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{ctp_refresh_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "refresh_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token/revoke",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token",
										"revoke"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ctp_access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ctp_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global Script",
					"const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
					"",
					"function generateRandomLetters() {",
					"  const randomLetter1 = alphabet.charAt(Math.floor(Math.random() * alphabet.length));",
					"  const randomLetter2 = alphabet.charAt(Math.floor(Math.random() * alphabet.length));",
					"",
					"  const randomTwoLetters = randomLetter1 + randomLetter2;",
					"  return randomTwoLetters;",
					"}",
					"",
					"// Set global variables",
					"pm.globals.set('randomLetters', generateRandomLetters());",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tracking-url",
			"value": "https:///openapi.dummydelivery.com/tracking?id=863313",
			"type": "string"
		},
		{
			"key": "customer-01-password",
			"value": "secret123",
			"type": "string"
		},
		{
			"key": "order-custom-type-key",
			"value": "deliveryinfo",
			"type": "string"
		},
		{
			"key": "warehouse-channel-key",
			"value": "aus-warehouse-channel",
			"type": "string"
		},
		{
			"key": "spa-client-credentials-scope",
			"value": "view_categories:{{projectKey}} view_published_products:{{projectKey}} manage_my_profile:{{projectKey}}",
			"type": "string"
		},
		{
			"key": "spa-password-scope",
			"value": "manage_my_profile:{{projectKey}} manage_my_orders:{{projectKey}}",
			"type": "string"
		},
		{
			"key": "spa-anonymous-scope",
			"value": "manage_my_profile:{{projectKey}} manage_my_orders:{{projectKey}}",
			"type": "string"
		}
	]
}